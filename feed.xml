<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">Ouch1978 @ Github</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://ouch1978.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="http://ouch1978.github.io/" />
<updated>2018-01-23T11:45:09+08:00</updated>
<id>http://ouch1978.github.io/</id>
<author>
  <name>Ouch Liu (劉耀群)</name>
  <uri>http://ouch1978.github.io/</uri>
  <email>ouch1978@hotmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[誰說魚與熊掌不可兼得? 讓你的安卓模擬器與 Hyper-V 可以和平共處]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2018/01/22/co-existing-android-emulator-and-hyper-v/"/>
  <id>http://ouch1978.github.io/2018/01/22/co-existing-android-emulator-and-hyper-v</id>
  <published>2018-01-22T23:30:00+08:00</published>
  <updated>2018-01-22 23:30:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Visual%20Studio" term="Visual Studio" /><category scheme="http://ouch1978.github.io/tags/#Xamarin" term="Xamarin" /><category scheme="http://ouch1978.github.io/tags/#Hyper-V" term="Hyper-V" /><category scheme="http://ouch1978.github.io/tags/#Intel%20HAXM" term="Intel HAXM" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;有在使用 Visual Studio 2017 和 Xamarin 進行開發的朋友們可能會跟我一樣遇過同樣的問題：如果使用 Visual Studio 2017 裡面內建的安卓模擬器，就得把 Hyper-V 給關掉，不然就無法啟用 Intel® Hardware Accelerated Execution Manager 來替安卓模擬器加速。&lt;/p&gt;

&lt;p&gt;畢竟，要支援 Intel® Hardware Accelerated Execution Manager ，才能啟用 Visual Studio 2017 中內建模擬器工具裡的 Atom x86 架構安卓虛擬機，以達到媲美真機的效能(官方說法是效能會差上十倍，不信邪的朋友也可以試著開啟 ARM 架構的模擬器來比較看看，效能真的會讓人很想哭)。&lt;/p&gt;

&lt;p&gt;但是身為一個工程師，透過 VM 來架設實驗環境應該是家常便飯的事。從微軟在 Windows 8 內建了 Hyper-V 之後，它就一直是我架設 VM 的首選工具。&lt;/p&gt;

&lt;p&gt;所以當看到 Hyper-V 和 Intel® Hardware Accelerated Execution Manager 無法共存的訊息出現，我就一直在想：「到底有什麼其它的方式能讓我不用每次都得要為了開啟安卓模擬器就得先手動關閉 Hypervisor 功能；而在要使用虛擬機器的時候又得先手動開啟 Hypervisor?」。&lt;/p&gt;

&lt;p&gt;在網路上爬了一些文章之後，歸納出了下面兩種解法。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;解法一：建立多重開機選單&lt;/h2&gt;

&lt;p&gt;我們可以透過建立多重開機的方式，建立出一個預設把 Hypervisor 關閉的設定，專門用來執行安卓模擬器。&lt;/p&gt;

&lt;p&gt;方法如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;以系統管理員的身份開啟命令提示字元，並且輸入下列指令：&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;從現有的開機設定複製出一組新的設定&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-batchfile&quot; data-lang=&quot;batchfile&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;bcdedit /copy {current} /d &quot;Microsoft Windows 10 – No Hypervisor&quot;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;執行成功之後會得到一串機碼值，如下圖。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2018-01-22-co-existing-android-emulator-and-hyper-v/01-copy-a-new-boot-setting.png&quot; title=&quot;建立一組新的開機設定&quot;&gt;&lt;img src=&quot;/images/blog-images/2018-01-22-co-existing-android-emulator-and-hyper-v/01-copy-a-new-boot-setting.png&quot; alt=&quot;建立一組新的開機設定&quot; title=&quot;建立一組新的開機設定&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;複製步驟一產生的機碼，並且接著輸入：&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;將新的開機設定檔中的 Hypervisor 功能關閉&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-batchfile&quot; data-lang=&quot;batchfile&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;bcdedit /set {步驟一產生的機碼} hypervisorlaunchtype off&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果出現操作順利完成的訊息，就代表完成啦!!~&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2018-01-22-co-existing-android-emulator-and-hyper-v/02-set-hypervisor-launchtype-off.png&quot; title=&quot;將新的開機設定中的 Hypervisor 啟動方式設定為 Off&quot;&gt;&lt;img src=&quot;/images/blog-images/2018-01-22-co-existing-android-emulator-and-hyper-v/02-set-hypervisor-launchtype-off.png&quot; alt=&quot;將新的開機設定中的 Hypervisor 啟動方式設定為 Off&quot; title=&quot;將新的開機設定中的 Hypervisor 啟動方式設定為 Off&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;之後只要重新開機，就會出現像下圖的選單，這時候我們就可以在要使用安卓模擬器的時候用關閉 Hypervisor 的設定來開機囉!!~&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2018-01-22-co-existing-android-emulator-and-hyper-v/03-can-choose-between-enable-hypervisor-or-not.png&quot; title=&quot;之後開機時就能選擇是否要開啟 Hypervisor 囉!!&quot;&gt;&lt;img src=&quot;/images/blog-images/2018-01-22-co-existing-android-emulator-and-hyper-v/03-can-choose-between-enable-hypervisor-or-not.png&quot; alt=&quot;之後開機時就能選擇是否要開啟 Hypervisor 囉!!&quot; title=&quot;之後開機時就能選擇是否要開啟 Hypervisor 囉!!&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;visual-studio-emulator-for-android&quot;&gt;解法二：安裝 Visual Studio Emulator for Android&lt;/h2&gt;

&lt;p&gt;對於使用 AMD CPU 的朋友們來說，天生就無法透過安裝 Intel® Hardware Accelerated Execution Manager 來啟用 x86 架構的安卓模擬器。&lt;/p&gt;

&lt;p&gt;不過幸好我們還是可以手動下載之前在 Visual Studio 2015 裡內建的 Visual Studio Emulator for Android。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2018-01-22-co-existing-android-emulator-and-hyper-v/04-visual-studio-emulator-for-android.png&quot; title=&quot;Visual Studio Emulator for Android 的模擬器外觀&quot;&gt;&lt;img src=&quot;/images/blog-images/2018-01-22-co-existing-android-emulator-and-hyper-v/04-visual-studio-emulator-for-android.png&quot; alt=&quot;Visual Studio Emulator for Android 的模擬器外觀&quot; title=&quot;Visual Studio Emulator for Android 的模擬器外觀&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;更讓人開心的是，它原生就支援 x86 架構的安卓模擬器，有了它，就不用再忍受 ARM 架構模擬器的龜速囉!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2018-01-22-co-existing-android-emulator-and-hyper-v/05-x86-architecture-supported-for-visual-studio-emulator-for-android.png&quot; title=&quot;Visual Studio Emulator for Android 原生就支援 x86 架構&quot;&gt;&lt;img src=&quot;/images/blog-images/2018-01-22-co-existing-android-emulator-and-hyper-v/05-x86-architecture-supported-for-visual-studio-emulator-for-android.png&quot; alt=&quot;Visual Studio Emulator for Android 原生就支援 x86 架構&quot; title=&quot;Visual Studio Emulator for Android 原生就支援 x86 架構&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;尤於 Visual Studio Emulator for Android 也是基於 Hyper-V 技術打造出來的，所以它和 Hyper-V 完全不會互相衝突。&lt;/p&gt;

&lt;p&gt;而且它也內建了加速器、GPS、電量、相機等等相關的模擬功能，用起來並不輸給 Google 原生的模擬器喔!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2018-01-22-co-existing-android-emulator-and-hyper-v/06-built-in-accelerometer-simulator.png&quot; title=&quot;Visual Studio Emulator for Android 內建的加速器模擬功能&quot;&gt;&lt;img src=&quot;/images/blog-images/2018-01-22-co-existing-android-emulator-and-hyper-v/06-built-in-accelerometer-simulator.png&quot; alt=&quot;Visual Studio Emulator for Android 內建的加速器模擬功能&quot; title=&quot;Visual Studio Emulator for Android 內建的加速器模擬功能&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visual Studio Emulator for Android 的下載點&lt;a href=&quot;https://aka.ms/vscomemudownload&quot; title=&quot;Visual Studio Emulator for Android 下載連結&quot;&gt;在此&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;總結&lt;/h2&gt;

&lt;p&gt;上面兩種方法「基本上」都可以解決 Hyper-V 和安卓模擬器無法並存的問題。&lt;/p&gt;

&lt;p&gt;但是至於哪個方式比較好用，或是哪個方式比較適合你，就得要看你的環境條件和使用習慣了。&lt;/p&gt;

&lt;p&gt;如果是使用 Intel CPU 的朋友，可能建立多重開機選單會比較能壓榨出電腦的效能，而且可以享受到 Intel® Hardware Accelerated Execution Manager 帶來的快感。&lt;/p&gt;

&lt;p&gt;而對於使用 AMD CPU 的朋友們，可能 Visual Studio Emulator for Android 會是一個更好的選擇，因為它原生就支援 x86 的模擬器，而且 Intel® Hardware Accelerated Execution Manager 對你來說是看得到但是卻吃不到的東西。&lt;/p&gt;

&lt;p&gt;以上，希望對有跟我遇到相同煩惱的朋友們有幫助喔~&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2018/01/22/co-existing-android-emulator-and-hyper-v/&quot;&gt;誰說魚與熊掌不可兼得? 讓你的安卓模擬器與 Hyper-V 可以和平共處&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on January 22, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[透過 Xamarin.Forms 來玩玩傳說中的 XAML Standard (preview) 吧!!]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2018/01/08/xaml-standard-preview-in-xamarin-forms/"/>
  <id>http://ouch1978.github.io/2018/01/08/xaml-standard-preview-in-xamarin-forms</id>
  <published>2018-01-08T23:30:00+08:00</published>
  <updated>2018-01-08 23:30:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Visual%20Studio" term="Visual Studio" /><category scheme="http://ouch1978.github.io/tags/#Xamarin" term="Xamarin" /><category scheme="http://ouch1978.github.io/tags/#XAML%20Standard" term="XAML Standard" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;除了 .NET Standard 2.0 之外，2017 年還有另一個讓我很期待的東西，據說可以讓 UWP 和 Xamarin.Forms 的 XAML 寫起來更直覺，而且可以無縫接軌，那就是我們今天要介紹的主角，XAML Standard!!&lt;/p&gt;

&lt;h2 id=&quot;xaml-standard-&quot;&gt;XAML Standard 簡介&lt;/h2&gt;

&lt;p&gt;如果對 XAML 發展的歷史有一定瞭解的朋友應該都知道，目前的 XAML 在不同的平台上(WPF、Silverlight、UWP、Xamarin Forms)支援的控制項和功能都不盡相同。&lt;/p&gt;

&lt;p&gt;舉例來說，同樣是文字控制項，在 UWP 裡面叫做 TextBlock ，但是在 Xamarin 裡面卻叫做 Label；而文字輸入控制項在 UWP 裡面叫作 TextBox ，但是在 Xamarin 裡面卻叫做 Entry。&lt;/p&gt;

&lt;p&gt;更進一步來看，連控制項的名稱都不一樣了，屬性就有更大的差別了。例如：在 UWP 裡面，ProgressBar 的數值叫做 Value，在 Xamarin 裡面則是叫作 Progress。&lt;/p&gt;

&lt;p&gt;基於以上種種不一致的因素，所以即便我們使用的都是 XAML 語法，但是卻往往得要為了不同的平台去作不同的調整。&lt;/p&gt;

&lt;p&gt;為了消弭這種的不便因子，所以 XAML Standard 的概念就這樣誕生了，初步的目標是讓 WPF、Windows 10 XAML 以及 Xamarin.Forms 的 XAML 可以使用一致的標準。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;XAML Standard 是在 Build 2017 提出來的概念，目前 XAML Standard 的 1.0 版還在 Preview 階段，詳細的內容可以參考官方 GitHub。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;牛刀小試&lt;/h2&gt;

&lt;p&gt;好啦，說完了故事，就到了動手實作的時間了。&lt;/p&gt;

&lt;p&gt;首先透過 Visual Studio 2017 建立一個 Cross Platform 的專案，並且在專案樣版設定的步驟選取使用 .Net Standard 作為程式碼共享的策略。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2018-01-08-xaml-standard-preview-in-xamarin-forms/01-create-with-dot-net-standard.png&quot; title=&quot;以 .Net Standard 作為共享策略&quot;&gt;&lt;img src=&quot;/images/blog-images/2018-01-08-xaml-standard-preview-in-xamarin-forms/01-create-with-dot-net-standard.png&quot; alt=&quot;以 .Net Standard 作為共享策略&quot; title=&quot;以 .Net Standard 作為共享策略&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在專案建立完成之後，可以先下載 &lt;a href=&quot;https://aka.ms/xf-xamlstandard-nuget&quot; title=&quot;Xamarin.Forms.Alias.2.5.1.87875.nupkg 下載連結&quot;&gt;Xamarin.Forms.Alias.2.5.1.87875.nupkg&lt;/a&gt;，並且將它放到一個好記的資料夾裡面。&lt;/p&gt;

&lt;p&gt;接著在 Visual Studio 2017 中點選 Tools -&amp;gt; NuGet Package Manager -&amp;gt; Package Manager Settings，如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2018-01-08-xaml-standard-preview-in-xamarin-forms/02-open-package-manager-settings.png&quot; title=&quot;NuGet Package Manager Settings&quot;&gt;&lt;img src=&quot;/images/blog-images/2018-01-08-xaml-standard-preview-in-xamarin-forms/02-open-package-manager-settings.png&quot; alt=&quot;NuGet Package Manager Settings&quot; title=&quot;NuGet Package Manager Settings&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然後在 Package Sources 中加入一個自定的 Package Source，並且將 Source 的路徑指到存放 nupkg 檔的資料夾。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2018-01-08-xaml-standard-preview-in-xamarin-forms/03-add-custom-nuget-source.png&quot; title=&quot;自訂 Package Source&quot;&gt;&lt;img src=&quot;/images/blog-images/2018-01-08-xaml-standard-preview-in-xamarin-forms/03-add-custom-nuget-source.png&quot; alt=&quot;自訂 Package Source&quot; title=&quot;自訂 Package Source&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;完成之後，就依序在我們想要使用 XAML Standrd 的專案中各自加入 Xamarin.Forms.Alias 的參考。&lt;/p&gt;

&lt;p&gt;比較快的作法是：點選 Tools -&amp;gt; NuGet Package Manager -&amp;gt; Manage NuGet Package for Solution…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2018-01-08-xaml-standard-preview-in-xamarin-forms/04-open-manage-nuget-package-for-solution-window.png&quot; title=&quot;開啟 Manage Nuget Package for Solutions 功能&quot;&gt;&lt;img src=&quot;/images/blog-images/2018-01-08-xaml-standard-preview-in-xamarin-forms/04-open-manage-nuget-package-for-solution-window.png&quot; alt=&quot;開啟 Manage Nuget Package for Solutions 功能&quot; title=&quot;開啟 Manage Nuget Package for Solutions 功能&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然後勾選 ‘Include prerelease’，在 Package source 下拉選單中選取我們在上一個步驟手動加入的 source，再勾選要安裝的專案後按下 Install 鈕，即可一次針對多個專案進行安裝。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2018-01-08-xaml-standard-preview-in-xamarin-forms/05-install-xamarin-forms-alias-to-projects.png&quot; title=&quot;透過 Manage NuGet Package for Solution 為多個專案加入 NuGet 參考&quot;&gt;&lt;img src=&quot;/images/blog-images/2018-01-08-xaml-standard-preview-in-xamarin-forms/05-install-xamarin-forms-alias-to-projects.png&quot; alt=&quot;透過 Manage NuGet Package for Solution 為多個專案加入 NuGet 參考&quot; title=&quot;透過 Manage NuGet Package for Solution 為多個專案加入 NuGet 參考&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接下來，我們得先在兩個 .cs 檔裡面透過 Alias.Init() 方法針對 XAML Standrd 作初始化 - 分別是安卓專案中的 MainActivity.cs 檔，以及 iOS 專案中的 AppDelegate.cs 檔，修改如下：&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;安卓專案裡的 MainActivity.cs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.Content.PM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.Runtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.Views&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//加入 Xamarin.Forms.Alias 的參考                        
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xamarin.Forms.Alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;XamlStandardPreview.Droid&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;XamlStandardPreview&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Icon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@drawable/icon&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Theme&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@style/MainTheme&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainLauncher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ConfigurationChanges&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ScreenSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Orientation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormsAppCompatActivity&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TabLayoutResource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tabbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ToolbarResource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Toolbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//加入這行
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;Alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;nf&quot;&gt;LoadApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;iOS 專案裡的 AppDelegate.cs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Collections.Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Foundation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;UIKit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//加入 Xamarin.Forms.Alias 的參考
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xamarin.Forms.Alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;XamlStandardPreview.iOS&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The UIApplicationDelegate for the application. This class is responsible for launching the
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// User Interface of the application, as well as listening (and optionally responding) to
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// application events from iOS.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AppDelegate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormsApplicationDelegate&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// This method is invoked when the application has loaded and is ready to run. In this
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// method you should instantiate the window, load the UI into it and then make the window
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// visible.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// You have 17 seconds to return from this method, or iOS will terminate your application.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FinishedLaunching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIApplication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//加入這行
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;Alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;nf&quot;&gt;LoadApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FinishedLaunching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;還有要在我們想使用 XAML Standard 的 XAML 檔中加入對 Xamarin.Forms.Alias 的參考。&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;.Net Standard 專案裡的 MainPage.xaml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:alias=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Xamarin.Forms.Alias;assembly=Xamarin.Forms.Alias&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;XamlStandardPreview.MainPage&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage.Content&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage.Content&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;作完以上的準備工作之後，就可以開始使用 XAML Standard 來設計我們的使用者介面啦!!~&lt;/p&gt;

&lt;p&gt;以目前 XAML Standard  Preview 已經支援的控制項作出來的小範例如下：&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;.Net Standard 專案裡的 MainPage.xaml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;XamlStandardPreview.MainPage&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:alias=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Xamarin.Forms.Alias;assembly=Xamarin.Forms.Alias&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage.Content&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ScrollView&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:StackPanel&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBlock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Border&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:Border&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,0,12,16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;BackgroundColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pink&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;BorderBrush=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Red&quot;&lt;/span&gt;
                              &lt;span class=&quot;na&quot;&gt;CornerRadius=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBlock&amp;gt;&lt;/span&gt;我在 Border 裡&lt;span class=&quot;nt&quot;&gt;&amp;lt;/alias:TextBlock&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/alias:Border&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBlock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Button&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,0,12,16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;我是按鈕&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBlock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ComboBox&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:ComboBox&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,0,12,16&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:ComboBox.Items&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;x:String&amp;gt;&lt;/span&gt;ComboBox Item1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/x:String&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;x:String&amp;gt;&lt;/span&gt;ComboBox Item2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/x:String&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;x:String&amp;gt;&lt;/span&gt;ComboBox Item3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/x:String&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/alias:ComboBox.Items&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/alias:ComboBox&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBlock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ProgressBar&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:ProgressBar&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,0,12,16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBlock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ProgressRing&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:ProgressRing&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,0,12,16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;IsRunning=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Red&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBlock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TextBlock&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBlock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,0,12,16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;FontAttributes=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bold&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;FontSize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;18&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    TextBlock
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/alias:TextBlock&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBlock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TextBox&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBox&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,0,12,16&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;TextBox&lt;span class=&quot;nt&quot;&gt;&amp;lt;/alias:TextBox&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBlock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ToggleSwitch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:ToggleSwitch&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,0,12,16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;IsOn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/alias:ToggleSwitch&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBlock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UserControl&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:UserControl&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12,0,12,16&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:Border&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;BackgroundColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LightGreen&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:StackPanel&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBlock&amp;gt;&lt;/span&gt;Name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/alias:TextBlock&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;alias:TextBox&amp;gt;&lt;/span&gt;Ouch Liu&lt;span class=&quot;nt&quot;&gt;&amp;lt;/alias:TextBox&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/alias:StackPanel&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/alias:Border&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/alias:UserControl&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/alias:StackPanel&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ScrollView&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage.Content&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面的程式碼在安卓執行的結果如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2018-01-08-xaml-standard-preview-in-xamarin-forms/06-screenshot-of-android.png&quot; title=&quot;本範例在安卓的執行結果&quot;&gt;&lt;img src=&quot;/images/blog-images/2018-01-08-xaml-standard-preview-in-xamarin-forms/06-screenshot-of-android.png&quot; alt=&quot;本範例在安卓的執行結果&quot; title=&quot;本範例在安卓的執行結果&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文的範例原始碼連結如下，請自行取用：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Ouch1978/XamlStandardPreview&quot;&gt;&lt;img src=&quot;/images/blog-images/source-code-link.png&quot; alt=&quot;Sample&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;試用心得&lt;/h2&gt;

&lt;p&gt;光是想到能使用同一組 XAML 語言跨 WPF 、 UWP 和 Xamarin.Forms 平台進行開發，就是一件讓我非常期待的事。&lt;/p&gt;

&lt;p&gt;但是可以想像的是，要完成這樣的願景所需要花費的時間和心力也一定不小。&lt;/p&gt;

&lt;p&gt;目前的 XAML Standard Preview 在使用上雖然不是那麼的直覺；還是得要手動初始化，還有在 XAML 檔中加入參考…&lt;/p&gt;

&lt;p&gt;撰寫出來的 XAML 和其他平台上執行的結果和長相也還是有著不小的差異，目前我有發現的一些差別如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Border 的外框並不會顯示出來。&lt;/li&gt;
  &lt;li&gt;ProgressBar 的 Value 好像不會反映在 UI 上&lt;/li&gt;
  &lt;li&gt;透過 XAML 指定 ComboBox 的 SelectedIndex 不會有效果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除此之外，目前的版本跟我想像中可以直接從 Silverlight 或是 UWP 的 XAML 複製貼上就直接抄到 Xamarin.Forms 中使用的美夢還是有著不小的差距。&lt;/p&gt;

&lt;p&gt;而且目前 XAML Standard 的進展似乎不如 .Net Standard 2.0 和 .Net Core 2.0 的進展一樣快速。&lt;/p&gt;

&lt;p&gt;不過，至少這是一個得期待的開始，希望之後可以完全無痛共用的時刻可以早一點到來~~&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2018/01/08/xaml-standard-preview-in-xamarin-forms/&quot;&gt;透過 Xamarin.Forms 來玩玩傳說中的 XAML Standard (preview) 吧!!&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on January 08, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[解決 Visual Studio 2017 在有手寫筆的裝置上沒有回應及重啟的問題]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/08/29/fix-visual-studio-2017-crash-on-pen-enabled-devices/"/>
  <id>http://ouch1978.github.io/2017/08/29/fix-visual-studio-2017-crash-on-pen-enabled-devices</id>
  <published>2017-08-29T23:30:00+08:00</published>
  <updated>2017-08-29 23:30:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Visual%20Studio" term="Visual Studio" /><category scheme="http://ouch1978.github.io/tags/#PenIMC_v0400.dll" term="PenIMC_v0400.dll" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;這次重灌完電腦，並且安裝好了 Visual Studio 2017 之後，一直沒什麼時間把它打開來動手寫程式。&lt;/p&gt;

&lt;p&gt;昨天索性打開來更新到最新的版本之後，隨便開了一個之前寫好玩的專案想說來跑看看，結果一開沒多久，Visual Studio 馬上沒有回應，再過沒多久，就直接崩潰重開了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-08-29-fix-visual-studio-2017-crash-on-pen-enabled-devices\01-visual-studio-2017-is-restarting.png&quot; title=&quot;Visual Studio 2017 重複自動重啟&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-08-29-fix-visual-studio-2017-crash-on-pen-enabled-devices\01-visual-studio-2017-is-restarting.png&quot; alt=&quot;Visual Studio 2017 重複自動重啟&quot; title=&quot;Visual Studio 2017 重複自動重啟&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;到 Windows 事件檢視器一看，發現錯誤原因如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-08-29-fix-visual-studio-2017-crash-on-pen-enabled-devices\02-error-log-in-event-viewer.png&quot; title=&quot;Windows 事件檢視器中顯示的錯誤訊息&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-08-29-fix-visual-studio-2017-crash-on-pen-enabled-devices\02-error-log-in-event-viewer.png&quot; alt=&quot;Windows 事件檢視器中顯示的錯誤訊息&quot; title=&quot;Windows 事件檢視器中顯示的錯誤訊息&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用關鍵字 &lt;code&gt;PenIMC_v0400.dll&lt;/code&gt; 一查，看起來好像跟手寫筆有關係，而且&lt;a href=&quot;https://developercommunity.visualstudio.com/content/problem/55303/visual-studio-may-terminate-unexpectedly-when-runn.html&quot; title=&quot;Visual Studio may freeze or crash when running on a pen-enabled machine&quot;&gt;看起來有不少人&lt;/a&gt;跟我一樣中招…&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;解法&lt;/h2&gt;

&lt;p&gt;簡單的說，解法有兩種，一種是透過 Windows Update 安裝 KB4022716 (15063.447)這個更新包；但是很神奇的，我的電腦跑的明明就是 15063.502 版，卻還是一樣中招啊…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-08-29-fix-visual-studio-2017-crash-on-pen-enabled-devices\03-my-pc-is-running-15063.502.png&quot; title=&quot;我的電腦已經是 15063.502版&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-08-29-fix-visual-studio-2017-crash-on-pen-enabled-devices\03-my-pc-is-running-15063.502.png&quot; alt=&quot;我的電腦已經是 15063.502版&quot; title=&quot;我的電腦已經是 15063.502版&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;所以只能試看看另一種方式，也就是自己手動修改 Visual Studio 2017 的設定檔，把 Visual Studio 2017 對觸控和手寫筆的支援相關功能關掉(這個比較像是 Workaround，而且等微軟之後釋出相關修正檔之後，得要記得把它改回來)。&lt;/p&gt;

&lt;p&gt;具體的作法如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;找到 Visual Studio 2017 的執行檔路徑，如 C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用文字編輯工具開啟 &lt;code&gt;devenv.exe.config&lt;/code&gt; 檔(記得使用 Administrator 權限開，否則可能會無法存檔喔)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;找到 &lt;code&gt;AppContextSwitchOverrides&lt;/code&gt; 相關設定，並且加入 “&lt;code&gt;Switch.System.Windows.Input.Stylus.DisableStylusAndTouchSupport=true&lt;/code&gt;“。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;依照我自己的例子，改完之後 AppContextSwitchOverrides 這一段會變成下面這樣&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;devenv.exe.config&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;AppContextSwitchOverrides&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Switch.System.Threading.ThrowExceptionIfDisposedCancellationTokenSource=false;Switch.System.Windows.Forms.DoNotSupportSelectAllShortcutInMultilineTextBox=false;Switch.UseLegacyAccessibilityFeatures=false;Switch.System.Windows.Input.Stylus.DisableStylusAndTouchSupport=true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;手動把觸控和手寫支援關掉之後，目前觀查了半天，還沒有出現自動重啟的問題。&lt;/p&gt;

&lt;p&gt;以上，希望可以幫助到跟我遇到相同狀況的苦主。&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/08/29/fix-visual-studio-2017-crash-on-pen-enabled-devices/&quot;&gt;解決 Visual Studio 2017 在有手寫筆的裝置上沒有回應及重啟的問題&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on August 29, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[解決 Visual Studio 2017 首次執行時卡在 We are getting things ready 的問題]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/08/15/fix-visual-studio-2017-first-launch-stucking/"/>
  <id>http://ouch1978.github.io/2017/08/15/fix-visual-studio-2017-first-launch-stucking</id>
  <published>2017-08-15T23:30:00+08:00</published>
  <updated>2017-08-15 23:30:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Visual%20Studio" term="Visual Studio" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;上星期筆電不知道是什麼原因，突然就沒辦法正常開機了，而且試過使用修復功能也沒救，只好整個重灌了。&lt;/p&gt;

&lt;p&gt;就當安裝完 Visual Studio 2017 之後，準備首次啟動的時候，輸入完帳號按下下一步按鈕之後，畫面上就出現了 &lt;code&gt;We are getting things ready&lt;/code&gt; 的訊息，不過因為當時已屆下班時間，我就索性放著讓它跑。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-08-15-fix-visual-studio-2017-first-launch-stucking\01-we're-getting-things-ready.png&quot; title=&quot;We are getting thins ready&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-08-15-fix-visual-studio-2017-first-launch-stucking\01-we're-getting-things-ready.png&quot; alt=&quot;We are getting thins ready&quot; title=&quot;We are getting thins ready&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;沒想到… 隔天回到公司，一看電腦，它居然還是停留在一樣的畫面!!…&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;解法&lt;/h2&gt;

&lt;p&gt;根據經驗，首次啟動 Visual Studio 2017 的時候，應該會跑出一個登入的畫面讓我們進行登入的才對。&lt;/p&gt;

&lt;p&gt;而這個登入的步驟呢，如果使用的是 Microsoft Account 的話，在輸入完帳號之後，會另外跳轉到另一個視窗讓我們輸入密碼。&lt;/p&gt;

&lt;p&gt;神奇的是，這個應該要出現讓我輸入密碼的視窗並沒有出現…&lt;/p&gt;

&lt;p&gt;當時也不知道是哪來的靈感，想說會不會是視窗被擋住了或是被藏起來了，所以就索性的按了 &lt;code&gt;Alt + Tab&lt;/code&gt; 鈕…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-08-15-fix-visual-studio-2017-first-launch-stucking\02-find-the-missing-window-by-task-switch.png&quot; title=&quot;透過 Alt + Tab 鈕找到被藏起來的視窗&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-08-15-fix-visual-studio-2017-first-launch-stucking\02-find-the-missing-window-by-task-switch.png&quot; alt=&quot;透過 Alt + Tab 鈕找到被藏起來的視窗&quot; title=&quot;透過 Alt + Tab 鈕找到被藏起來的視窗&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;沒想到，還真的是被藏起來了!! 只要手動切換到那個視窗，就可以繼續完成登入的動作了。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;後記&lt;/h2&gt;

&lt;p&gt;後來上網一查才&lt;a href=&quot;https://developercommunity.visualstudio.com/content/problem/44750/were-getting-things-ready-stays-forever-1.html&quot; title=&quot;We're getting things ready stays forever&quot;&gt;發現&lt;/a&gt;，原來這個已經不是新問題了，理應早在四月底之前的某個版本更新就應該已經被修好了。&lt;/p&gt;

&lt;p&gt;無論如何，我就還是遇到了。&lt;/p&gt;

&lt;p&gt;而且神奇的是，剛剛試著在另一台 VM 安裝 VS2017，就完全沒遇到這個問題…&lt;/p&gt;

&lt;p&gt;這篇文章就當做個紀念，順便看看能不能幫到和我遇到同樣問題的朋友囉~&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/08/15/fix-visual-studio-2017-first-launch-stucking/&quot;&gt;解決 Visual Studio 2017 首次執行時卡在 We are getting things ready 的問題&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on August 15, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[直衝 Redstone 4!? Windows 測試人員計畫選項更新]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/08/14/windows-insider-options-updated/"/>
  <id>http://ouch1978.github.io/2017/08/14/windows-insider-options-updated</id>
  <published>2017-08-14T17:30:00+08:00</published>
  <updated>2017-08-15 17:30:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Windows%2010" term="Windows 10" /><category scheme="http://ouch1978.github.io/tags/#Creators%20Update" term="Creators Update" /><category scheme="http://ouch1978.github.io/tags/#Insider%20Program" term="Insider Program" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;這幾天在試玩 Windows Insider Preview 版 Windows 的時候，赫然發現在 Windows Indider Program 裡面的更新選項變得跟之前不太一樣了 – 除了之前可以選取從 Fast Ring 和 Slow Ring 進行更新之外，現在在 Fast Ring 中的使用者們還會得到另一個 “&lt;code&gt;您想要接收哪一類的內容?&lt;/code&gt;” 選項，而裡面的項目則包含了 “&lt;code&gt;Active development of Windows&lt;/code&gt;” 和 “&lt;code&gt;Skip ahead to the next Windows release&lt;/code&gt;” 這兩種。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-08-14-windows-insider-options-updated/01-new-options-in-fast-ring.png&quot; title=&quot;Windows 測試人員計畫的新選項&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-08-14-windows-insider-options-updated/01-new-options-in-fast-ring.png&quot; alt=&quot;Windows 測試人員計畫的新選項&quot; title=&quot;Windows 測試人員計畫的新選項&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;而且手機版和桌機版都有這個選項。(但是我的手機還來不及截圖，很開心的升級到 15237 版之後，那個選項就不見了)&lt;/p&gt;

&lt;h2 id=&quot;skip-ahead-to-the-next-windows-release-&quot;&gt;Skip ahead to the next Windows release 是幹嘛用的?&lt;/h2&gt;

&lt;p&gt;根據&lt;a href=&quot;https://blogs.windows.com/windowsexperience/2017/07/26/announcing-windows-10-insider-preview-build-16251-pc-build-15235-mobile/&quot; title=&quot;Announcing Windows 10 Insider Preview Build 16251 for PC &amp;amp; Build 15235 for Mobile&quot;&gt;微軟在七月二十六號發佈的消息&lt;/a&gt;，他們想讓在 Fast Ring 裡面的測試者們可以提前體驗到還在開發中的 Redstone 4 的功能。&lt;/p&gt;

&lt;p&gt;簡單的說，目前的 Windows 10 原始碼可以分成幾個分支，分別是開發中版本、Windows 測試人員預覽分支和當前版本分支(雖然還有企業版分支和長期支援分支，不過我們就先略過不看…)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-08-14-windows-insider-options-updated/02-windows-branches.png&quot; title=&quot;Windows 版本分支與測試人員計畫關係簡圖&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-08-14-windows-insider-options-updated/02-windows-branches.png&quot; alt=&quot;Windows 版本分支與測試人員計畫關係簡圖&quot; title=&quot;Windows 版本分支與測試人員計畫關係簡圖&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;目前的當前版本分支當然就是一般使用者正在使用中的 RS2 正式版的內容啦。&lt;/p&gt;

&lt;p&gt;開發中版本分支經過微軟內部測試之後，則會被推送到 Windows 測試人員預覽分支，供選擇 Slow Ring 或 Fast Ring 的 Windows 測試人員們進行預覽，一直到正式版產出之前，參與 Windows 開發人員計畫的朋友們都可以搶先一般使用者早一步進行體驗。&lt;/p&gt;

&lt;p&gt;隨著秋季創意者更新(開發代號為 Redstone 3 ，簡稱 RS3) 開發版越來越穩定的同時，微軟也早已開始了下一個 Windows 版本(Redstone 4)的開發，並且想藉由 Windows 測試人員，早一步的讓有興趣的朋友們進行測試。所以才加入了這兩個新的選項。&lt;/p&gt;

&lt;p&gt;之後，選擇 &lt;code&gt;Active development of Windows&lt;/code&gt; 的朋友們將會可以提早測試到 RS3 發行版的功能，但是因為是穩定版的關係，所以並不會接收到開發中內建應用程式的更新。&lt;/p&gt;

&lt;p&gt;而選擇 &lt;code&gt;Skip ahead to the next Windows release&lt;/code&gt; 的使用者們則是可以跳過 RS3 的穩定版，更提早一步的直接體驗到 RS4 以及開發中的內建應用者式。(但是選了這個選項之後除了重灌之外，是沒辦法反悔倒回去測試 RS3 的喔!! 服用前請三思~)&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;後記&lt;/h2&gt;

&lt;p&gt;正當我很開心的想說可以早一步體驗到 RS4 並且選擇了 Skip ahead to the next Windows release 之後沒多久， Windows 就跳出一個訊息跟我說目前不支援這個選項組合了，貌似微軟已經把這個選項關掉了。(不知道是參與測試的人數已經足夠了還是其它原因?)&lt;/p&gt;

&lt;p&gt;希望在不久的將來可以看到這個選項再次被打開，讓我看得到也吃得到啊~~&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;2017/08/15 更新&lt;/h2&gt;

&lt;p&gt;很神奇的，這幾天重新下載了 Insider Preview 16251 版重新安裝之後，Skip ahead to the next Windows release 這個選項又被打開了，而且還可以直接透過 Windwos Update 更新到 Build 16257.re_prerelease.170728-1630 版。(雖然說這個應該和 Skip ahead to the next Windows release 應該沒有什麼直接的關係啦…)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-08-14-windows-insider-options-updated/03-update-to-16257.rs_prerelease.png&quot; title=&quot;已經可以透過 Windwos Update 更新到 Build 16257.re_prerelease.170728-1630 版&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-08-14-windows-insider-options-updated/03-update-to-16257.rs_prerelease.png&quot; alt=&quot;已經可以透過 Windwos Update 更新到 Build 16257.re_prerelease.170728-1630 版&quot; title=&quot;已經可以透過 Windwos Update 更新到 Build 16257.re_prerelease.170728-1630 版&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;但是至少 Skip ahead to the next Windows release 現在是可以選的囉!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-08-14-windows-insider-options-updated/04-skip-ahead-to-the-next-Windows-release-enabled-again.png&quot; title=&quot;Skip ahead to the next Windows release 選項又復活了&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-08-14-windows-insider-options-updated/04-skip-ahead-to-the-next-Windows-release-enabled-again.png&quot; alt=&quot;Skip ahead to the next Windows release 選項又復活了&quot; title=&quot;Skip ahead to the next Windows release 選項又復活了&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;至於之後什麼時候才能得到 RS4 相關功能的更新呢?? 讓我們繼續看下去~~&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/08/14/windows-insider-options-updated/&quot;&gt;直衝 Redstone 4!? Windows 測試人員計畫選項更新&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on August 14, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[使用 Visual Studio 2017 搭配 Xamarin.UITest 進行安卓應用程式的自動化測試]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/05/25/mobile-ui-automation-with-xamarin-uitest/"/>
  <id>http://ouch1978.github.io/2017/05/25/mobile-ui-automation-with-xamarin-uitest</id>
  <published>2017-05-25T23:30:00+08:00</published>
  <updated>2017-05-25 23:30:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Visual%20Studio%202017" term="Visual Studio 2017" /><category scheme="http://ouch1978.github.io/tags/#Xamarin.UITest" term="Xamarin.UITest" /><category scheme="http://ouch1978.github.io/tags/#Automation%20Testing" term="Automation Testing" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;介紹完了使用 Appium 來針對安卓應用程式進行自動化測試的方式之後。這回要跟大家分享的是更輕鬆愉快的方式–只要透過錄製的方式就能自動產生程式碼的 Xamarin.UITest。&lt;/p&gt;

&lt;p&gt;如果要簡單的介紹一下 Xamarin.UITest ，它其實就是一個以 Calabash 為基礎，可以讓我們透過 NUnit 和 C# 來撰寫針對安卓和 iOS 原生 App 自動化測試的一個框架。&lt;/p&gt;

&lt;p&gt;雖然它的名字前面掛了個 Xamarin ，但是它可不只能測 Xamarin 開發出來的 App 而已喔!! 原生的安卓和 iOS 應用程式也都是可以透過它來作到自動化測試的喔!!&lt;/p&gt;

&lt;p&gt;而 Xamarin.UITest 原生支援 NUnit 2，所以建立出來的專案預設就會加入 NUnit 的參考，整個測試框架也是基於 NUnit 2 所建構的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;需要特別注意的是，目前 UITest 尚未支援 NUnit 3 喔!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好了，有了簡單的介紹之後，再來我們就直接進入重點啦~&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;懶人/麻瓜福音 - 透過錄製的方式產生程式碼&lt;/h2&gt;

&lt;p&gt;Xamarin.UITest 最吸引人的地方就是可以直接透過 Visual Studio 來錄製測試的步驟，並且自動轉化為測試程式碼。&lt;/p&gt;

&lt;p&gt;廢話不多說，馬上開啟 Visual Studio 2017 來建立一個 Xamarin.UITest 測試專案。
專案類型使用 &lt;code&gt;Cross-Platform&lt;/code&gt; -&amp;gt; &lt;code&gt;UI Test App (Xamarin.UITest|Cross-Platform)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/01-create-uitest-project.png&quot; title=&quot;建立 Xamarin.UITest 測試專案&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/01-create-uitest-project.png&quot; alt=&quot;建立 Xamarin.UITest 測試專案&quot; title=&quot;建立 Xamarin.UITest 測試專案&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;專案建立完成之後，透過方案總管打開內建的 Tests.cs 檔，應該可以看到如下圖的畫面：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/02-default-test-cs.png&quot; title=&quot;預設的 Test.cs 內容&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/02-default-test-cs.png&quot; alt=&quot;預設的 Test.cs 內容&quot; title=&quot;預設的 Test.cs 內容&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;在開始錄製測試的步驟之前，建議先將電腦中的安卓模擬器開起來準備；如果要使用實機進行錄製的話，也請先把機器接上電腦。&lt;/p&gt;

&lt;p&gt;只要點選那個錄製符號加閃電的圖示，並且選取 &lt;code&gt;Record New Test&lt;/code&gt; -&amp;gt; &lt;code&gt;Select APK&lt;/code&gt;，接著選取要進行測試的 APK 之後，接下來，Visual Studio 就會幫我們把 APK 安裝到模擬器上，並且自動打開它，錄製我們接下來的所有行為。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/03-select-apk-file.png&quot; title=&quot;選取 APK 檔&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/03-select-apk-file.png&quot; alt=&quot;選取 APK 檔&quot; title=&quot;選取 APK 檔&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;這邊我就一樣使用之前用來示範 Appium 自動化測試的同一個 APK 檔來進行測試。&lt;/p&gt;

&lt;p&gt;如果光是用文字加圖片來描述錄製的過程的話可能會有點複雜，所以我直接錄給大家看囉~&lt;/p&gt;

&lt;p&gt;請看 VCR !!&lt;/p&gt;

&lt;div style=&quot;position:relative;height:0;padding-bottom:56.25%;max-width:56.25rem;margin:0 auto;&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/-F111OKB2bg?rel=0&amp;amp;showinfo=0?ecver=2&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; style=&quot;position:absolute;width:100%;height:100%;left:0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;影片中有幾個重點，在這邊再透過文字來提醒大家：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;錄製的過程中，如果有需要驗證物件是否出現或是值是否正確的時候，可以按下左邊的板手小圖示，選取 &lt;code&gt;Start Assertion Mode&lt;/code&gt;，再點選要驗證的控制項，就能自動產生驗證相關的程式碼。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;若要結束錄製，則需要按下左邊的板手小圖示，選取 &lt;code&gt;Stop Recording&lt;/code&gt; 即可。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;錄製完畢之後，千萬要記得要在 AppInitializer.cs 的 StartApp 方法中為 Android 手動加上 APK 檔的路徑，這樣才能順利執行測試喔!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-2&quot;&gt;錄好了，然後呢?&lt;/h2&gt;

&lt;p&gt;大家可以看到，錄製出來的程式碼就是很標準的 C# 語法，只要有基本的 C# 功力，應該都有能力去編輯它的內容才對。&lt;/p&gt;

&lt;p&gt;然而，畢竟不是我們自己手動刻出來的，透過錄製產生出來的程式碼，也可能會有部份不如我們的預期。&lt;/p&gt;

&lt;p&gt;舉例來說，像是驗證的部份，自動產生的程式碼就不會幫我們加上 NUnit 的 Assert 方法來進行驗證。&lt;/p&gt;

&lt;p&gt;另外，針對某些控制項的搜尋方式，有些會使用控制項 Id ，有些則是使用值來查找。&lt;/p&gt;

&lt;p&gt;雖然這些並不會影響到自動化測試的結果，不過對於講究紀率的開發團隊來說，可能還是得手動進行一些調整，來讓這組程式碼可以符合團隊開發的規範。&lt;/p&gt;

&lt;p&gt;所以，舉例來說，我們可以將錄製好的程式碼改成這樣：&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Test.cs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;[Test]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NewTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Marked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The Hunger Games&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Harry Potter and the Order of the Phoenix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;To Kill a Mockingbird&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pride and Prejudice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Marked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;txtName&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Pride and Prejudice&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Marked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;txtPrice&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4.8&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;這樣一來應該比原來產生的程式碼來得一致多了吧?&lt;/p&gt;

&lt;p&gt;除了用錄製的方式產生程式碼之外，當然您也可以選擇使用完全手寫的方式來寫出自動化測試的所有流程喔!!&lt;/p&gt;

&lt;h2 id=&quot;repl-read-eval-print-loop-&quot;&gt;小密技 - 使用 REPL (Read-Eval-Print-Loop) 工具輔助開發測試程式&lt;/h2&gt;

&lt;p&gt;如果想要使用純手動的方式自己刻出測試程式的話，那麼，要怎麼準確的抓取到要測試的目標控制項應該就是最重要的一件事了。&lt;/p&gt;

&lt;p&gt;Xamarin.UITest 裡面提供了一個名為 REPL 的工具，可以讓我們在命令提示字元模式下與 UI 進行互動。&lt;/p&gt;

&lt;p&gt;使用方式很簡單，只要在測試方法中加上一行：&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Test.cs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Repl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;當測試程式執行到這一行的時候，就會把 REPL 叫出來，同時將測試暫停在這一行。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/04-launch-repl.png&quot; title=&quot;REPL 視窗&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/04-launch-repl.png&quot; alt=&quot;REPL 視窗&quot; title=&quot;REPL 視窗&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;REPL 裡面也提供了類似 IntelliSense 的功能，只要輸入 app. ，下面就會出現可供使用的方法。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/05-repl-intelli-sense.png&quot; title=&quot;REPL 中也支援類似 IntelliSense 的功能&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/05-repl-intelli-sense.png&quot; alt=&quot;REPL 中也支援類似 IntelliSense 的功能&quot; title=&quot;REPL 中也支援類似 IntelliSense 的功能&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;例如說，我想輸入 app.Query ，我只需要先輸入 app.q , REPL 就會幫我們過濾能使用的方法，再來只要透過 Tab 鍵，就能幫我們完成指令的輸入。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/06-repl-command-hint.png&quot; title=&quot;REPL 的指令提示功能&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/06-repl-command-hint.png&quot; alt=&quot;REPL 的指令提示功能&quot; title=&quot;REPL 的指令提示功能&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;所以我們就可以透過 REPL 來拆解 App 的結構，或是先行一步驗證指令的結果。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/07-repl-command-auto-complete.png&quot; title=&quot;REPL 的自動完成功能&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/07-repl-command-auto-complete.png&quot; alt=&quot;REPL 的自動完成功能&quot; title=&quot;REPL 的自動完成功能&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;也可以在 REPL 裡面直接輸入 tree 指令，列出整個 App UI 的樹狀結構。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/08-repl-tree-command.png&quot; title=&quot;透過 REPL 的 Tree 指令列出 UI 結構&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-25-mobile-ui-automation-with-xamarin-uitest/08-repl-tree-command.png&quot; alt=&quot;透過 REPL 的 Tree 指令列出 UI 結構&quot; title=&quot;透過 REPL 的 Tree 指令列出 UI 結構&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;有了 REPL 的協助，開發的過程應該就會輕鬆很多囉!!~&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;雖然 Xamarin.UITest API 的使用邏輯和 Selenium/Appium 不太相同，但是基於有強大的錄製能力以及簡潔的語法以及支援雲端測試這三大優勢的加持下，也是很值得參考的行動裝置自動化測試解決方案喔!!&lt;/p&gt;

&lt;p&gt;當然，不只是安卓的應用程式可以這樣測，iOS 上的應用程式也可以比照辦理喔!! (不過前提是得要先有一個 iOS 開發環境….)&lt;/p&gt;

&lt;p&gt;因為我手邊還沒有的 iOS 開發環境的關係，iOS 的部份就等哪天我在門口踢到一個裝著 MacBook 的箱子之後再來跟各位分享了。&lt;/p&gt;

&lt;p&gt;以上，希望哪天我也可以在門口踢到一個裝著 MacBook 的箱子。&lt;/p&gt;

&lt;p&gt;最後的最後，Xamarin.UITest 的強大之處並不只是這樣而已，另一個強大的點就是可以透過 Xamarin Test Cloud 上的裝置來進行測試。&lt;/p&gt;

&lt;p&gt;這個部份就待之後再另開文章來分享給大家囉!!~&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/05/25/mobile-ui-automation-with-xamarin-uitest/&quot;&gt;使用 Visual Studio 2017 搭配 Xamarin.UITest 進行安卓應用程式的自動化測試&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on May 25, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[解決透過 Appium 測試安卓裝置上的行動網站發生 ChromeDriver 版本不相容的問題]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/05/11/fix-appium-chrome-driver-error/"/>
  <id>http://ouch1978.github.io/2017/05/11/fix-appium-chrome-driver-error</id>
  <published>2017-05-11T23:30:00+08:00</published>
  <updated>2017-05-11 23:30:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Visual%20Studio%202017" term="Visual Studio 2017" /><category scheme="http://ouch1978.github.io/tags/#Appium" term="Appium" /><category scheme="http://ouch1978.github.io/tags/#Automation%20Testing" term="Automation Testing" />
  <content type="html">
  
    &lt;p&gt;之前在使用 Appium 測試安卓裝置上的行動網站的時候，一切都很開心愉快。&lt;/p&gt;

&lt;p&gt;但是，安卓裝置的版本眾多，總不可能只測單一版本；為了確保網站在不同的裝置上都能正常運作，使用不同版本的安卓作業系統來進行測試也是免不了得要作的。&lt;/p&gt;

&lt;p&gt;原本以為，只要把相同的測試放到不同版本的模擬器裡面跑，應該什麼都不用多作，就可以一一通過測試才對。&lt;/p&gt;

&lt;p&gt;但是「&lt;code&gt;代誌嘸親像憨人所想的架擬簡單&lt;/code&gt;」，我光是把模擬器的作業系統從 4.4.2 換到 6.0 而已，然後他就死掉了…&lt;/p&gt;

&lt;p&gt;基本上會看到的現象就是瀏覽器無法被正常啟動，而從 Appium 的 Console 裡則會看到如下圖的錯誤訊息：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-11-fix-appium-chrome-driver-error/01-chrome-version-must-be-greator-than-error.png&quot; title=&quot;Chrome version must be =&amp;gt; xxx&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-11-fix-appium-chrome-driver-error/01-chrome-version-must-be-greator-than-error.png&quot; alt=&quot;Chrome version must be =&amp;gt; xxx&quot; title=&quot;Chrome version must be =&amp;gt; xxx&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Encountered internal error running command: Error: unknown error: Chrome version must be &amp;gt;= 55.0.2883.0
(Driver info: chromedriver=2.28.455520 (cc17746adff54984afff480136733114c6b3704b),platform=Windows NT 10.0.15063 x86_64)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;蝦毀!? 難道我只是想測試不同的安卓版本，也得要一一為每台模擬器更新 Chrome 嗎!? (要更新 Chrome 還得要綁帳號什麼的，超麻煩的啊!!~)&lt;/p&gt;

&lt;p&gt;好吧，山不轉路轉。我不更新 Chrome ，我改 ChromeDriver 的版本總可以了吧!?&lt;/p&gt;

&lt;p&gt;不過，話說回來，Appium 的 ChromeDriver 怎麼改? 在執行檔後面加參數嗎? 好像行不通…&lt;/p&gt;

&lt;p&gt;經過一番亂試之後，總算讓我找到了!!(明明就很容易找到啊~~)&lt;/p&gt;

&lt;p&gt;原來就在 Appium Desktop 的 &lt;code&gt;Advanced&lt;/code&gt; 頁籤下的 &lt;code&gt;Chromedriver Binary Path&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-11-fix-appium-chrome-driver-error/02-chromedriver-binary-path.png&quot; title=&quot;Chromedriver Binary Path&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-11-fix-appium-chrome-driver-error/02-chromedriver-binary-path.png&quot; alt=&quot;Chromedriver Binary Path&quot; title=&quot;Chromedriver Binary Path&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;遇到類似問題的話，只要到 &lt;a href=&quot;https://chromedriver.storage.googleapis.com/index.html&quot; title=&quot;Chromedriver官方下載網站&quot;&gt;ChromeDriver 官方下載網站&lt;/a&gt;下載舊版的 ChromeDriver ，並且把完整的路徑(包含檔名)填入 Chromedriver Binary Path 欄位裡就行啦!!&lt;/p&gt;

&lt;p&gt;設定完畢之後，按下 Start Server v1.6.4，應該會看到 Appium Console 裡面出現我們自訂的 ChromeDriver 路徑。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-11-fix-appium-chrome-driver-error/03-customized-version-of-chromedriver-applied.png&quot; title=&quot;套用自訂版本的 Chromedriver&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-11-fix-appium-chrome-driver-error/03-customized-version-of-chromedriver-applied.png&quot; alt=&quot;套用自訂版本的 Chromedriver&quot; title=&quot;套用自訂版本的 Chromedriver&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;只要使用有支援作業系統中內建瀏覽器版本的 ChromeDriver ，測試應該就又可以順利的跑完囉!!~&lt;/p&gt;

&lt;p&gt;舉例來說，我在使用 Android 6.0 進行測試的時候，只要搭配 ChromeDriver 2.1.6 就沒問題了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;根據我的測試，ChromeDriver 2.1.6 搭配 Android 4.4.2 、6.0 和 7.1.1 這三個版本都不會有問題。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上，希望可以幫助到有需要的朋友們。&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/05/11/fix-appium-chrome-driver-error/&quot;&gt;解決透過 Appium 測試安卓裝置上的行動網站發生 ChromeDriver 版本不相容的問題&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on May 11, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[透過 Visual Studio 2017 與 Appium 測試安卓手機上的 App]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/05/10/mobile-app-automation-testing-with-vs2017-and-appium/"/>
  <id>http://ouch1978.github.io/2017/05/10/mobile-app-automation-testing-with-vs2017-and-appium</id>
  <published>2017-05-10T23:30:00+08:00</published>
  <updated>2017-05-10 23:30:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Visual%20Studio%202017" term="Visual Studio 2017" /><category scheme="http://ouch1978.github.io/tags/#Appium" term="Appium" /><category scheme="http://ouch1978.github.io/tags/#Automation%20Testing" term="Automation Testing" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在先前的 &lt;a href=&quot;/2017/04/17/mobile-web-automation-testing-with-vs2017-and-appium/&quot;&gt;透過 Visual Studio 2017 與 Appium 測試安卓手機上的行動版網頁&lt;/a&gt; 一文中跟大家介紹了使用 Appium 來達到 Mobile Web 測試的自動化。&lt;/p&gt;

&lt;p&gt;不過，在 Mobile 的世界裡， App 才是大家更想關心的事。所以，這次就來跟大家分享使用 Appium 來作到 Moble App 的測試自動化囉!!&lt;/p&gt;

&lt;p&gt;在接下去之前，讓我們再來看一次 Appium 的運作架構。
&lt;a href=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/00-the-architecture-of-appium.png&quot; title=&quot;Appium 的運作架構&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/00-the-architecture-of-appium.png&quot; alt=&quot;Appium 的運作架構&quot; title=&quot;Appium 的運作架構&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;環境準備&lt;/h2&gt;

&lt;p&gt;在我們動手開始寫程式之前，得要先確認下列項目都已經安裝/設定好：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;安裝 Visual Studio 2017 的行動裝置相關開發功能(這樣才能使用 VS2017 附的安卓模擬器)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安裝 &lt;a href=&quot;https://github.com/appium/appium-desktop/releases/latest&quot; title=&quot;下載 Appium&quot;&gt;Appium&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安裝 &lt;a href=&quot;https://github.com/appium/appium-desktop/releases/latest&quot; title=&quot;下載 Java SDK&quot;&gt;Java SDK&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 Windows 的系統變數中加入 &lt;code&gt;ANDROID_HOME&lt;/code&gt;，並且將它指到 Android SDK 的安裝路徑(預設為 C:\Program Files (x86)\Android\android-sdk)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 Windows 的系統變數中加入 &lt;code&gt;JAVA_HOME&lt;/code&gt; ，並且並將它指定到 Java SDK 的 bin 資料夾
&lt;a href=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/01-set-android-home-and-java-home.png&quot; title=&quot;設定 JAVA_HOME 路徑&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/01-set-android-home-and-java-home.png&quot; alt=&quot;設定 JAVA_HOME 路徑&quot; title=&quot;設定 JAVA_HOME 路徑&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 Windows 系統變數中的 Path 項目中加上以下幾個路徑：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;%JAVA_HOME%&lt;/li&gt;
      &lt;li&gt;%ANDROID_HOME%&lt;/li&gt;
      &lt;li&gt;%ANDROID_HOME%\tools\&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;%ANDROID_HOME%\platform-tools\
&lt;a href=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/02-add-paths.png&quot; title=&quot;設定 Path 中的路徑&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/02-add-paths.png&quot; alt=&quot;設定 Path 中的路徑&quot; title=&quot;設定 Path 中的路徑&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;android-&quot;&gt;Android 模擬器設定&lt;/h2&gt;

&lt;p&gt;透過 VS 開發最大的好處就是可以在 VS 裡面管理所有相關的功能，包含 Android SDK 和模擬器。
安裝好 VS 之後，不妨先透過 Android SDK Manager (Tools -&amp;gt; Android -&amp;gt; Android SDK Manager…)來更新 Android SDK 到最新的版本。&lt;/p&gt;

&lt;p&gt;另外，如果你使用 Intel 的 CPU 的話，也建議針對 Android 4.4.2 安裝 &lt;code&gt;Google APIs Intel x86 Atom System Image&lt;/code&gt;，並且安裝 &lt;a href=&quot;https://software.intel.com/en-us/android/articles/intel-hardware-accelerated-execution-manager&quot; title=&quot;Intel® Hardware Accelerated Execution Manager&quot;&gt;&lt;code&gt;Intel® Hardware Accelerated Execution Manager&lt;/code&gt;&lt;/a&gt; 以獲得更好的效能。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/03-install-google-apis-intel-x86-atom-system-image.png&quot; title=&quot;安裝Google APIs Intel x86 Atom System Image&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/03-install-google-apis-intel-x86-atom-system-image.png&quot; alt=&quot;安裝Google APIs Intel x86 Atom System Image&quot; title=&quot;安裝Google APIs Intel x86 Atom System Image&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;若有啟用 Hyper-V 的話，HAXM 可能會和它相衝，這時候可以透過在命令提示字元輸入 &lt;code&gt;bcdedit /set hypervisorlaunchtype off&lt;/code&gt; 之後重新開機以關閉 Hyper-V 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SDK 更新完之後，就可以透過 Tools -&amp;gt; Android -&amp;gt; Android Emulator Manager… 來管理虛擬機囉。在這邊，我選擇修改原來內建的 AVD_GalaxyNexus_ToolsForApacheCordova，並且調整 CPU/ABI 為 &lt;code&gt;Google APIs Intel Atom (x86)&lt;/code&gt;、Skin 為 &lt;code&gt;Skin with dynamic hardware controls&lt;/code&gt;、勾選 &lt;code&gt;Use Host GPU&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/04-edit-android-virtual-device.png&quot; title=&quot;編輯安卓模擬器設定&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/04-edit-android-virtual-device.png&quot; alt=&quot;編輯安卓模擬器設定&quot; title=&quot;編輯安卓模擬器設定&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;設定完成之後，就可以按下 Android Virtual Device (AVD) Manager 裡面的啟動按鈕來開啟模擬器啦~&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/05-press-start-button-to-launch-android-emulator.png&quot; title=&quot;按下Start鈕啟動模擬器&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/05-press-start-button-to-launch-android-emulator.png&quot; alt=&quot;按下Start鈕啟動模擬器&quot; title=&quot;按下Start鈕啟動模擬器&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;如果看到模擬器正常執行，就可以開始動手寫測試程式囉。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;若要在實機上進行測試的話，可能得先自行進行開發者解鎖。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-2&quot;&gt;撰寫自動化測試程式碼&lt;/h2&gt;

&lt;p&gt;在撰寫自動化測試的程式碼之前，首先我們得要找一個 App 來測試(廢話)。&lt;/p&gt;

&lt;p&gt;基於自己的程式自己寫的原則，我這邊就直接拿 [透過 Gorilla Player 在裝置上即時預覽 Xamarin Forms 介面] 一文中的範例稍作修改來供測試使用。&lt;/p&gt;

&lt;p&gt;這個範例程式的內容很簡單，基本上就是用一個 ListView 去呈現書籍的資料，點擊之後會切到詳細資料頁面這樣而已。&lt;/p&gt;

&lt;p&gt;而我希望能透過 Appium 來幫我儘可能的點選 ListView 中的每個項目，並且確認每個項目的資料值都如我預期，以及詳細資料頁裡面的資料也符合預期這樣。(不過我的測試並沒有針對圖片去作任何的驗證。)&lt;/p&gt;

&lt;p&gt;所以我寫出來的程式碼如下：&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;UnitTest1.cs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Collections.Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Drawing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MobileAppUnitTestWithAppium.Models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Newtonsoft.Json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;NUnit.Framework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OpenQA.Selenium.Appium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OpenQA.Selenium.Appium.Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OpenQA.Selenium.Appium.Enums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OpenQA.Selenium.Remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;UnitTestProject&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestFixture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnitTest1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//宣告 Appium Driver，並指定使用 Android Element
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;AppiumDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestMobileApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DesiredCapabilities&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desiredCapabilities&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DesiredCapabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//指定平台為安卓
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;desiredCapabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetCapability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MobileCapabilityType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PlatformName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MobilePlatform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//指定裝置名稱，裝置名稱可以透過在 Tools -&amp;gt; Android Adb Command Prompt... 中輸入 adb devices -l 取得
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;desiredCapabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetCapability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MobileCapabilityType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;kate&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//指定要測試的 App，基本上就是 Android 專案的名稱
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;desiredCapabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetCapability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;appPackage&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MobileAppUnitTestWithAppium.Android&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//指定 App 的 MainActivity，這個值可以在 Android 專案下的 obj\Debug\android\AndroidManifest.xml 檔裡面找到
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;desiredCapabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetCapability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;appActivity&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;md566d58bce9157a88432d9c294e8892f90.MainActivity&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//建立 AppiumDriver 的 Instance ，並指定 Appium Server 的路徑
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AndroidDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://127.0.0.1:4723/wd/hub&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desiredCapabilities&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;AndroidElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;listView&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listViewItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementsByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;android.widget.LinearLayout&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedBooks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDirectoryName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reflection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetExecutingAssembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OpenText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{directory}\\Books.json&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadToEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;expectedBooks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeserializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Manage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//抓取螢幕高度的中心點
&lt;/span&gt;            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenHeightStart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Height&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listViewItem&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listViewItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//取得目前抓到的項目
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualBook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listViewItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;txtName&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listViewItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;txtAuthor&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listViewItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;txtPrice&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedBook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedBooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;listViewItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;actualBook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;txtName&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;txtAuthor&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Isbn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;txtIsbn&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;txtPrice&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;ReleaseDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;txtReleaseDate&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Isbn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Isbn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReleaseDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReleaseDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;//找到返回上一頁的按鈕
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;AndroidElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;android.widget.ImageButton&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;//點選返回上一頁的按鈕
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;backButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;//每次都把 ListView 往上滑一點點
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Swipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenHeightStart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenHeightStart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listViewItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Height&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TearDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TearDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CloseApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在進行測試之前，請先將 App 佈署到要測試的裝置上，並且打開桌上面的 Appium 圖示來啟動 Appium Server。
基本上，完全不需要更改任何設定，只需要按下 Start Server 1.6.4 按鈕就行了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/07-start-appium-server.png&quot; title=&quot;按下 Start Server 1.6.4 按鈕&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/07-start-appium-server.png&quot; alt=&quot;按下 Start Server 1.6.4 按鈕&quot; title=&quot;按下 Start Server 1.6.4 按鈕&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;Appium Server 啟動之後的畫面如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/08-appium-server-started.png&quot; title=&quot;Appium Server 啟動後的畫面&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/08-appium-server-started.png&quot; alt=&quot;Appium Server 啟動後的畫面&quot; title=&quot;Appium Server 啟動後的畫面&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在開始執行測試之前，請務必先確認 Appium Server 已經正常啟動，而且 Android 模擬器也能正常運作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;眼尖的朋友應該會發現，我在描述測試案例的句子裡面有語病，我說&lt;code&gt;儘可能的點選 ListView 中的每個項目&lt;/code&gt;，這是因為 Appium 目前並沒有內建 ScrollToEnd 之類的 API，之前本來還有 ScrollTo 和 ScrollToExact 兩個 API 可以用，但是後來都被拔掉了，所以我只能儘可能的做到測好測滿。&lt;/p&gt;

&lt;p&gt;以安卓為例，透過 Appium 來抓取 ListView 中的子控制項的時候，並不像網頁的 DOM物件那樣只要元件樹載入完畢，就能抓到所有項目；反之，我們能抓取到的項目個數會受限於螢幕大小(也就是可視範圍能顯示的數目)，並沒有辦法一次抓到所有的項目。&lt;/p&gt;

&lt;p&gt;如果你有一個超級長的 ListView ，而且要針對裡面的每個元素進行測試的話，可能就得自己想辦法搭配捲動畫面的功能，先把 ListView 的所有項目都先爬出來，再逐一進行測試。&lt;/p&gt;

&lt;p&gt;另外，如果要透過控制項的 ID 來抓取控制項的話，在不同的平台上會有不同的屬性需要特別設定，例如以 Xamarin.Forms 來說，就得透過 &lt;code&gt;AutomationId&lt;/code&gt; 來作為測試時期控制項唯一的識別 Id。甚至有些平台/框架的控制項 Id 會是平台/框架主動賦予的，在使用上就得格外注意。&lt;/p&gt;

&lt;p&gt;在撰寫測試程式的時候，也可以透過 Android SDK 中的 UI Automator Viewer 來了解 App 中控制項的名稱和位置等等關係。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/09-ui-automator-viewer.png&quot; title=&quot;UI Automator Viewer&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-10-mobile-app-automation-testing-with-vs2017-and-appium/09-ui-automator-viewer.png&quot; alt=&quot;UI Automator Viewer&quot; title=&quot;UI Automator Viewer&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;可以透過 C:\Program Files (x86)\Android\android-sdk\tools\uiautomatorviewer.bat 來啟動 UI Automator Viewer。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上，希望能幫到有相關需求的朋友們。&lt;/p&gt;

&lt;p&gt;最後，附上專案的原始碼，請自行取用：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Ouch1978/MobileAppUnitTestWithAppium/&quot;&gt;&lt;img src=&quot;/images/blog-images/source-code-link.png&quot; alt=&quot;Sample&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/05/10/mobile-app-automation-testing-with-vs2017-and-appium/&quot;&gt;透過 Visual Studio 2017 與 Appium 測試安卓手機上的 App&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on May 10, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[透過 Gorilla Player 在裝置上即時預覽 Xamarin Forms 介面]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/05/08/design-xamarin-forms-with-gorilla-player/"/>
  <id>http://ouch1978.github.io/2017/05/08/design-xamarin-forms-with-gorilla-player</id>
  <published>2017-05-08T23:30:00+08:00</published>
  <updated>2017-05-08 23:30:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Visual%20Studio%202017" term="Visual Studio 2017" /><category scheme="http://ouch1978.github.io/tags/#Xamarin" term="Xamarin" /><category scheme="http://ouch1978.github.io/tags/#XAML" term="XAML" /><category scheme="http://ouch1978.github.io/tags/#Gorilla%20Player" term="Gorilla Player" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在使用 Visual Studio 中的 Xamarin 開發 App 的時候，雖然可以透過 Xamarin.Forms Previewer 來預覽 XAML 刻出來的畫面，不過如果能讓你直接在實機或是模擬器上直接看到畫面，是不是會更有感覺呢?&lt;/p&gt;

&lt;p&gt;另外，雖然透過 Xamarin 目前也支援設計時期的範例資料，但是我們還是得要透過 ViewModelLocater 搭配手動刻出的 ViewModel 才能得到我們想要的結果。&lt;/p&gt;

&lt;p&gt;最後， Xamarin.Forms Previewer 的穩定性也是很讓人垢病的一大致命傷。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/01-something-went-wrong.png&quot; title=&quot;Xamarin.Forms 目前還是不太穩定&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/01-something-went-wrong.png&quot; alt=&quot;Xamarin.Forms 目前還是不太穩定&quot; title=&quot;Xamarin.Forms 目前還是不太穩定&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;基於以上幾點(其實最痛的是穩定性啦)，讓我不得不尋找一個 Xamarin.Forms Previewer 的替代方案，後來，我找到了 Gorilla 。&lt;/p&gt;

&lt;p&gt;它可以讓我上面的三個願望(在虛擬與實機即時預覽/支援設計時期的資料繫結與範例資料/穩定)，一次滿足。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;下載與安裝&lt;/h2&gt;

&lt;p&gt;Gorilla Player 目前還在 Beta 階段，要使用之前，得先到 &lt;a href=&quot;http://gorillaplayer.com/&quot; title=&quot;Gorilla Player 官網&quot;&gt;Gorilla Player 官網&lt;/a&gt; 註冊一個帳號，之後才有辦法啟動 Gorilla Player。&lt;/p&gt;

&lt;p&gt;而下載頁面 &lt;a href=&quot;http://gorillaplayer.com/download.html&quot; title=&quot;Gorilla Player 下載頁面&quot;&gt;在此&lt;/a&gt; ，目前 Windows 與 Mac 兩個平台的版本都有提供。&lt;/p&gt;

&lt;p&gt;安裝的過程中，也可以選擇是否要安裝其他的功能，例如 Visual Studio 2015 或是 Xamarin Studio 的 Addin，以及 Player 應用程式的原始檔和範例。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/02-install-gorilla-player-extras.png&quot; title=&quot;Gorilla Player 擴充功能安裝畫面&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/02-install-gorilla-player-extras.png&quot; alt=&quot;Gorilla Player 擴充功能安裝畫面&quot; title=&quot;Gorilla Player 擴充功能安裝畫面&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;個人強烈建議至少要裝 Player 原始檔和範例。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看到這邊，應該有人會問，啊怎麼只有 Visual Studio 2015 的 Addin? 我用的是 Visual Studio 2017 耶!!&lt;/p&gt;

&lt;p&gt;免驚~ 免驚~ Visual Studio 2017 的使用者並沒有被放生，我們可以在 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=UXDivers.GorillaPlayerVisualStudioAddin&quot; title=&quot;Gorilla Player Visual Studio Addin&quot;&gt;Visual Studio Marketplace&lt;/a&gt; 裡面找到可供 Visual Studio 2017 使用的 Addin 。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;基本使用&lt;/h2&gt;

&lt;p&gt;Gorilla Player 執行的架構如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/03-architecture-of-gorilla-player.png&quot; title=&quot;Gorilla Player 執行架構&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/03-architecture-of-gorilla-player.png&quot; alt=&quot;Gorilla Player 執行架構&quot; title=&quot;Gorilla Player 執行架構&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;要透過 Gorilla Player 來預覽 Xamarin.Fomrs 的畫面，首先當然是得先開啟電腦上的 Gorilla Player 應用程式，沒意外的話，Server 應該都會正常啟動。&lt;/p&gt;

&lt;p&gt;如果要確認 Server 的相關資訊，可以透過在系統列的 Gorilla Player 圖示上按下滑鼠右鍵，選擇 &lt;code&gt;About Gorilla Player 0.9.1.2&lt;/code&gt;，就會看到如下圖的相關資訊。&lt;/p&gt;

&lt;p&gt;Server 預設會使用的 Port 也會顯示在這邊，若有開啟防火牆的話，記得要先把這 &lt;code&gt;9014&lt;/code&gt; 和 &lt;code&gt;14578&lt;/code&gt; 兩個 Port 解除封鎖喔!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/04-about-gorilla-player.png&quot; title=&quot;About Gorilla Player 中提供的資訊&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/04-about-gorilla-player.png&quot; alt=&quot;About Gorilla Player&quot; title=&quot;About Gorilla Player 中提供的資訊&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;也可以透過電腦上的瀏覽器直接瀏覽 http://localhost:9014 確認 Server 是否有正常啟動。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;確認 Server 正常啟動之後，再來是 Visual Studio 的部份，我們可以先任意開啟一個 Xamrain Form 專案來進行測試。&lt;/p&gt;

&lt;p&gt;如果已經安裝好了 Visual Studio 的 Addin 的話，可以在 Visual Studio 功能表中的 &lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;Gorilla Player&lt;/code&gt; 項目下看到如下圖的幾個選項。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/05-gorilla-player-menu-in-visual-studio.png&quot; title=&quot;Visual Studio 中的 Gorilla Player 選單&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/05-gorilla-player-menu-in-visual-studio.png&quot; alt=&quot;Visual Studio 中的 Gorilla Player 選單&quot; title=&quot;Visual Studio 中的 Gorilla Player 選單&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;也可以透過選單中出的是不是 Disconnect from Gorilla 來判斷是否已經正確的和 Server 接通。
另外，也可以透過選單中的 Follow Me 選項讓 Gorilla Player 自動跟隨正在編輯中的 XAML 檔。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;接著就是模擬器/手機的部份，我們得在目標裝置上先安裝好 Gorilla Player App，並且確認它可以連接到電腦上的 Gorilla Player Server，這樣才有辦法正常的預覽。&lt;/p&gt;

&lt;p&gt;要在模擬器或是手機上安裝 Gorilla Player App 的話，可以透過在系統列的 Gorilla Player 圖示上按下滑鼠右鍵，並且選取 &lt;code&gt;Show Player and Sample Location&lt;/code&gt; (前提是要在安裝的過程中有先安裝好範例。)，接著開啟資料夾中的 Player 專案，建置之後佈署到要用來預覽的裝置上。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/06-install-gorilla-player-app.png&quot; title=&quot;將 Gorilla Player App 安裝到虛擬機上&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/06-install-gorilla-player-app.png&quot; alt=&quot;將 Gorilla Player App 安裝到虛擬機上&quot; title=&quot;將 Gorilla Player App 安裝到虛擬機上&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果要使用實機預覽的話，您可能得先自行進行開發者解鎖的動作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;將 Gorilla Player App 佈署到裝置上之後，首先我們得要來測看看它是否能正確的和 Server 進行連線。&lt;/p&gt;

&lt;p&gt;打開 Gorilla Player App ，應該會看到有自動探索以及手動設定兩種方式可以選擇。&lt;/p&gt;

&lt;p&gt;如果使用自動探索的方式無法正確的連線到 Server 的話，就可以透過手動的方式設定，只需要輸入 Server 端的 IP 與 Port 即可。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/07-manual-setup.png&quot; title=&quot;手動設置 Gorilla Player&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/07-manual-setup.png&quot; alt=&quot;手動設置 Gorilla Player&quot; title=&quot;手動設置 Gorilla Player&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;成功連線之後，就可以直接針對編輯中的 XAML 檔進行預覽啦!!~&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/08-preview-with-gorilla-player.png&quot; title=&quot;透過 Gorilla Player 預覽編輯中的使用者介面&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/08-preview-with-gorilla-player.png&quot; alt=&quot;透過 Gorilla Player 預覽編輯中的使用者介面&quot; title=&quot;透過 Gorilla Player 預覽編輯中的使用者介面&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Gorilla Player 預覽的機制和 Edit and Continue 不同，得要&lt;code&gt;存檔&lt;/code&gt;之後才能看到改變。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-3&quot;&gt;進階使用 - 設計時期的資料繫結&lt;/h2&gt;

&lt;p&gt;已經熟悉 WPF、 SilverLight 、 UWP 開發的朋友們應該對 Blend 強大的設計時期資料支援功能愛不釋手吧。 在 Xamarin 裡面也雖然可以繞一小段路來達到類似的效果，但畢竟還是得要寫一點點程式。&lt;/p&gt;

&lt;p&gt;那透過 Gorilla Player 呢? 沒錯!! 完全無碼!! 只需要一個 JSON 檔，就可以讓我們作到設計時期的資料繫結喔!!&lt;/p&gt;

&lt;p&gt;基本上，只需要在我們的 PCL 專案根目錄中加入一個名為 SampleData.json 的 JSON 檔，並且用它來描述我們設計時期的資料，就可以輕鬆的餵給 Gorilla Player 使用囉。&lt;/p&gt;

&lt;p&gt;例如說，我在我的 PCL 專案中加入了一個描述書本資料的 SampleData.json 檔，如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/09-sample-data-json.png&quot; title=&quot;使用 SampleData.json 描述設計時期資料&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/09-sample-data-json.png&quot; alt=&quot;使用 SampleData.json 描述設計時期資料&quot; title=&quot;使用 SampleData.json 描述設計時期資料&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;接著我只要在我的 MainPage.xaml 檔中的 ListView 設定它的 &lt;code&gt;ItemsSource&lt;/code&gt; 為 &lt;code&gt;{Binding .}&lt;/code&gt;，就可以讓它吃到 SampleData.json 中的資料囉!!很簡單吧!?&lt;/p&gt;

&lt;p&gt;透過模擬器中的 Gorilla Player App 預覽的畫面如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/10-preview-with-sample-data-json.png&quot; title=&quot;預覽 SampleData.json 資料繫結的結果&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/10-preview-with-sample-data-json.png&quot; alt=&quot;預覽 SampleData.json 資料繫結的結果&quot; title=&quot;預覽 SampleData.json 資料繫結的結果&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SampleData.json 中設計時期資料會以 XAML 檔的檔名來進行對應。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;若同檔名但位於不同資料夾下的 XAML 檔想要使用不同的設計時期資料，則可以在定義的時候加上資料夾名稱。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;除了 SampleData.json 之外，我們也可以透過 NuGet 在 PCL 專案中加入 &lt;code&gt;UXDivers.GorillaPlayer.Common&lt;/code&gt; 的參考，使用它的 JsonData 類別直接在 XAML 檔裡面定義設計時期資料，如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/11-use-jsondata-class.png&quot; title=&quot;使用 JsonData 類別定義設計時期資料&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/11-use-jsondata-class.png&quot; alt=&quot;使用 JsonData 類別定義設計時期資料&quot; title=&quot;使用 JsonData 類別定義設計時期資料&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;透過模擬器預覽的畫面如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/12-preview-with-jsondata-class.png&quot; title=&quot;預覽透過 JsonData 類別資料繫結的結果&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-05-08-design-xamarin-forms-with-gorilla-player/12-preview-with-jsondata-class.png&quot; alt=&quot;預覽透過 JsonData 類別資料繫結的結果&quot; title=&quot;預覽透過 JsonData 類別資料繫結的結果&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;關於更進一步設計時期的資料繫結相關資訊，也可以參考 Gorilla Player 範例中的 &lt;code&gt;Samples\HowTo\SampleData&lt;/code&gt; 專案。
除此之外，&lt;a href=&quot;https://github.com/UXDivers/Gorilla-Player-Support/wiki/Working-with-sample-data&quot; title=&quot;Working with sample data&quot;&gt;Gorilly Player 官方的 GitHub&lt;/a&gt; 上也有相關的介紹。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-4&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;雖然得要多安裝另一個程式，而且無法享受原生的 Edit and Continue 功能，但是 Gorilla Player 在 Xamarin.Forms Previewer 穩定下來之前，應該都還是很方便的一套工具。&lt;/p&gt;

&lt;p&gt;而且能直接在實機上預覽，真的是很有 Fu 啊!!&lt;/p&gt;

&lt;p&gt;有興趣的朋友們不妨也安裝試用看看喔!!~&lt;/p&gt;

&lt;p&gt;最後，附上本文的範例程式原始碼，請自行取用：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Ouch1978/PlayXamarinFormsWithGorilla/&quot;&gt;&lt;img src=&quot;/images/blog-images/source-code-link.png&quot; alt=&quot;Sample&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/05/08/design-xamarin-forms-with-gorilla-player/&quot;&gt;透過 Gorilla Player 在裝置上即時預覽 Xamarin Forms 介面&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on May 08, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[透過 Visual Studio 2017 與 Appium 測試安卓手機上的行動版網頁]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/04/17/mobile-web-automation-testing-with-vs2017-and-appium/"/>
  <id>http://ouch1978.github.io/2017/04/17/mobile-web-automation-testing-with-vs2017-and-appium</id>
  <published>2017-04-17T23:50:00+08:00</published>
  <updated>2017-04-17 23:50:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Visual%20Studio%202017" term="Visual Studio 2017" /><category scheme="http://ouch1978.github.io/tags/#Appium" term="Appium" /><category scheme="http://ouch1978.github.io/tags/#Automation%20Testing" term="Automation Testing" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在開發行動版網站的過程中，測試仍然是很重要的一環，但是基於需要測試的裝置種類繁多，所以往往讓人又愛又怕受傷害。&lt;/p&gt;

&lt;p&gt;雖然說，可以透過 Selemium 搭配 Chrome 進行對不同裝置的自動化測試，但是，支援的裝置種類仍然有限，而且直接透過 Chrome 進行模擬，真實度也和真的在手機上進行測試有不小的差距。&lt;/p&gt;

&lt;p&gt;另外，以企業的解決方案這個角度來看，如果能透過一個標準化的框架，使用大部份開發者原本就熟悉的工具及程式語言，就可以同時滿足行動裝置網站與原生 App 的測試，那就更有價值了。&lt;/p&gt;

&lt;p&gt;在和&lt;a href=&quot;http://blackie1019.github.io/&quot; title=&quot;強者我同事 - 小黑&quot;&gt;強者我同事 - 小黑&lt;/a&gt;討論行動裝置上的網站和原生 App 測試相關的解決方案的時候，他提到了 Appium 這個測試框架。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;簡單來說，Appium 就是給行動裝置使用的 Selenium。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;基於上述幾個原因，我想試看看 Appium 是不是真的和 Selenium 之間的學習曲線是不是真的如其它人所說的那麼平緩。&lt;/p&gt;

&lt;p&gt;附帶一提，Appium 的運作架構如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/00-the-architecture-of-appium.png&quot; title=&quot;Appium 的運作架構&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/00-the-architecture-of-appium.png&quot; alt=&quot;Appium 的運作架構&quot; title=&quot;Appium 的運作架構&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;環境準備&lt;/h2&gt;

&lt;p&gt;在我們動手開始寫程式之前，得要先確認下列項目都已經安裝/設定好：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;安裝 Visual Studio 2017 的行動裝置相關開發功能(這樣才能使用 VS2017 附的安卓模擬器)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安裝 &lt;a href=&quot;https://github.com/appium/appium-desktop/releases/latest&quot; title=&quot;下載 Appium&quot;&gt;Appium&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安裝 &lt;a href=&quot;https://github.com/appium/appium-desktop/releases/latest&quot; title=&quot;下載 Java SDK&quot;&gt;Java SDK&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 Windows 的系統變數中加入 &lt;code&gt;ANDROID_HOME&lt;/code&gt;，並且將它指到 Android SDK 的安裝路徑(預設為 C:\Program Files (x86)\Android\android-sdk)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 Windows 的系統變數中加入 &lt;code&gt;JAVA_HOME&lt;/code&gt; ，並且並將它指定到 Java SDK 的 bin 資料夾
&lt;a href=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/01-set-android-home-and-java-home.png&quot; title=&quot;設定 JAVA_HOME 路徑&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/01-set-android-home-and-java-home.png&quot; alt=&quot;設定 JAVA_HOME 路徑&quot; title=&quot;設定 JAVA_HOME 路徑&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 Windows 系統變數中的 Path 項目中加上以下幾個路徑：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;%JAVA_HOME%&lt;/li&gt;
      &lt;li&gt;%ANDROID_HOME%&lt;/li&gt;
      &lt;li&gt;%ANDROID_HOME%\tools\&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;%ANDROID_HOME%\platform-tools\
&lt;a href=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/02-add-paths.png&quot; title=&quot;設定 Path 中的路徑&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/02-add-paths.png&quot; alt=&quot;設定 Path 中的路徑&quot; title=&quot;設定 Path 中的路徑&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;android-&quot;&gt;Android 模擬器設定&lt;/h2&gt;

&lt;p&gt;透過 VS 開發最大的好處就是可以在 VS 裡面管理所有相關的功能，包含 Android SDK 和模擬器。
安裝好 VS 之後，不妨先透過 Android SDK Manager (Tools -&amp;gt; Android -&amp;gt; Android SDK Manager…)來更新 Android SDK 到最新的版本。&lt;/p&gt;

&lt;p&gt;另外，如果你使用 Intel 的 CPU 的話，也建議針對 Android 4.4.2 安裝 &lt;code&gt;Google APIs Intel x86 Atom System Image&lt;/code&gt;，並且安裝 &lt;a href=&quot;https://software.intel.com/en-us/android/articles/intel-hardware-accelerated-execution-manager&quot; title=&quot;Intel® Hardware Accelerated Execution Manager&quot;&gt;&lt;code&gt;Intel® Hardware Accelerated Execution Manager&lt;/code&gt;&lt;/a&gt; 以獲得更好的效能。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/03-install-google-apis-intel-x86-atom-system-image.png&quot; title=&quot;安裝Google APIs Intel x86 Atom System Image&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/03-install-google-apis-intel-x86-atom-system-image.png&quot; alt=&quot;安裝Google APIs Intel x86 Atom System Image&quot; title=&quot;安裝Google APIs Intel x86 Atom System Image&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;若有啟用 Hyper-V 的話，HAXM 可能會和它相衝，這時候可以透過在命令提示字元輸入 &lt;code&gt;bcdedit /set hypervisorlaunchtype off&lt;/code&gt; 之後重新開機以關閉 Hyper-V 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SDK 更新完之後，就可以透過 Tools -&amp;gt; Android -&amp;gt; Android Emulator Manager… 來管理虛擬機囉。在這邊，我選擇修改原來內建的 AVD_GalaxyNexus_ToolsForApacheCordova，並且調整 CPU/ABI 為 &lt;code&gt;Google APIs Intel Atom (x86)&lt;/code&gt;、Skin 為 &lt;code&gt;Skin with dynamic hardware controls&lt;/code&gt;、勾選 &lt;code&gt;Use Host GPU&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/04-edit-android-virtual-device.png&quot; title=&quot;編輯安卓模擬器設定&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/04-edit-android-virtual-device.png&quot; alt=&quot;編輯安卓模擬器設定&quot; title=&quot;編輯安卓模擬器設定&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;設定完成之後，就可以按下 Android Virtual Device (AVD) Manager 裡面的啟動按鈕來開啟模擬器啦~&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/05-press-start-button-to-launch-android-emulator.png&quot; title=&quot;按下Start鈕啟動模擬器&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/05-press-start-button-to-launch-android-emulator.png&quot; alt=&quot;按下Start鈕啟動模擬器&quot; title=&quot;按下Start鈕啟動模擬器&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;如果看到模擬器正常執行，就可以開始動手寫測試程式囉。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;撰寫自動化測試程式碼&lt;/h2&gt;

&lt;p&gt;透過 Visual Studio 2017 建立出 Unit Test 專案之後，首先要作的是透過 NuGet Package Manager 在專案中加入 Appium.WebDriver 的參考。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/06-add-appium-webdriver-reference-through-nuget.png&quot; title=&quot;透過 NuGet 加入對 Appium 的參考&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/06-add-appium-webdriver-reference-through-nuget.png&quot; alt=&quot;透過 NuGet 加入對 Appium 的參考&quot; title=&quot;透過 NuGet 加入對 Appium 的參考&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;再來就可以開心的寫程式啦!!~&lt;/p&gt;

&lt;p&gt;我的範例程式如下：&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;UnitTest1.cs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.VisualStudio.TestTools.UnitTesting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OpenQA.Selenium.Appium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OpenQA.Selenium.Appium.Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OpenQA.Selenium.Remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OpenQA.Selenium.Appium.Enums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OpenQA.Selenium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MobileWebUnitTestWithAppium&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnitTest1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//宣告 Appium Driver，並指定使用 Android Element
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;AppiumDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestSearchOuchMvpProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//定義相容性
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;DesiredCapabilities&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desiredCapabilities&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DesiredCapabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//指定平台為安卓
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;desiredCapabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetCapability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MobileCapabilityType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PlatformName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MobilePlatform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//指定使用的平台版本為 4.4.2
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;desiredCapabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetCapability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MobileCapabilityType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PlatformVersion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4.4.2&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//指定裝置名稱，裝置名稱可以透過在 Tools -&amp;gt; Android Adb Command Prompt... 中輸入 adb devices -l 取得
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;desiredCapabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetCapability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MobileCapabilityType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;generic_x86&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//指定瀏覽器名稱為 Browser(也可以使用 Chrome，指定為 Browser 則會使用預設的瀏覽器)
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;desiredCapabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetCapability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MobileCapabilityType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BrowserName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Browser&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//指定不開啟任何 App(有的範例並沒有這行，但是我如果把這行拿掉的話會出錯)
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;desiredCapabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetCapability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MobileCapabilityType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//建立 AppiumDriver 的 Instance ，並指定 Appium Server 的路徑
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AndroidDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://127.0.0.1:4723/wd/hub&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desiredCapabilities&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//指定瀏覽器開啟網址
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Navigate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GoToUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://mvp.microsoft.com/zh-tw/&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//找出關鍵字搜尋框
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;AndroidElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchBox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;kw&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//在搜尋框中輸入文字
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;searchBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SendKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ouch Liu&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//按下 Enter
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;searchBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SendKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//找出內文為指定文字的超連結
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;AndroidElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profileLink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementByLinkText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ouch Liu&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//按下超連結
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;profileLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//取出 class 為 title 物件中的文字
&lt;/span&gt;            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindElementByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//定義預期值
&lt;/span&gt;            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedTitle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ouch Liu (劉耀群)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//比對實際值與預期值是否相同
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedTitle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;DeviceName 可以透過 Visual Studio 主選單的 Tools -&amp;gt; Android Adb Command Prompt… 中輸入 &lt;code&gt;adb devices -l&lt;/code&gt; 取得。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-3&quot;&gt;執行測試&lt;/h2&gt;

&lt;p&gt;在進行測試之前，請先打開桌上面的 Appium 圖示來啟動 Appium Server。
基本上，完全不需要更改任何設定，只需要按下 Start Server 1.6.4 按鈕就行了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/07-start-appium-server.png&quot; title=&quot;按下 Start Server 1.6.4 按鈕&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/07-start-appium-server.png&quot; alt=&quot;按下 Start Server 1.6.4 按鈕&quot; title=&quot;按下 Start Server 1.6.4 按鈕&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;Appium Server 啟動之後的畫面如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/08-appium-server-started.png&quot; title=&quot;Appium Server 啟動後的畫面&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/08-appium-server-started.png&quot; alt=&quot;Appium Server 啟動後的畫面&quot; title=&quot;Appium Server 啟動後的畫面&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;在開始執行測試之前，請務必先確認 Appium Server 已經正常啟動，而且 Android 模擬器也能正常運作。&lt;/p&gt;

&lt;p&gt;接著就可以透過 Test Explorer 來執行我們的測試程式，驗證看看 Appium 是不是真的有那麼厲害囉。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/09-automation-running.gif&quot; title=&quot;實際執行畫面&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/09-automation-running.gif&quot; alt=&quot;實際執行畫面&quot; title=&quot;實際執行畫面&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;因為我最後驗證的條件只有檢查文字，只要瀏覽器中的 Dom 物件找得到該文字就算測試成功了，所以並不需要將畫面往下捲，也是可以通過測試的。&lt;/p&gt;

&lt;p&gt;另外，在執行的過程中，我們也可以看到 Appium Server 視窗中處理測試程式中各個動作的 Log。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/10-appium-server-console-log.png&quot; title=&quot;Appium Server 測試期間的 Log&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-17-mobile-web-automation-testing-with-vs2017-and-appium/10-appium-server-console-log.png&quot; alt=&quot;Appium Server 測試期間的 Log&quot; title=&quot;Appium Server 測試期間的 Log&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;上面的測試程式碼應該對於平常就有在使用 Selenium 的朋友們充滿了親切感吧，就我個人的感覺，真的是很容易上手的一個框架。&lt;/p&gt;

&lt;p&gt;加上Appium Server Desktop 最近也更新到了新版，免除了舊版許多繁冗的設定，現在幾乎是打開之後只要按下 Start Server 就可以使用了，真的是超級方便的啊!!~~&lt;/p&gt;

&lt;p&gt;有相關需求的朋友們不妨也一起玩看看喔!!&lt;/p&gt;

&lt;p&gt;最後，附上專案的原始碼，請自行取用：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Ouch1978/MobileWebUnitTestWithAppium/&quot;&gt;&lt;img src=&quot;/images/blog-images/source-code-link.png&quot; alt=&quot;Sample&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/04/17/mobile-web-automation-testing-with-vs2017-and-appium/&quot;&gt;透過 Visual Studio 2017 與 Appium 測試安卓手機上的行動版網頁&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on April 17, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[回來吧!! Creator Update 開始按鈕右鍵選單裡的控制台選項!!]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/04/07/add-control-panel-back-after-creator-update/"/>
  <id>http://ouch1978.github.io/2017/04/07/add-control-panel-back-after-creator-update</id>
  <published>2017-04-07T23:50:00+08:00</published>
  <updated>2017-04-07 23:50:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Windows%2010" term="Windows 10" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;自從 Windows 10 更新到 Creator Update 之後，原來在開始按鈕右鍵選單裡面的控制台選項不見了，取而代之的是新的設定選單。但是對於已經習慣使用控制台的我來說，這個改變真的是讓我很不習慣啊~~&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/01-control-panel-link-is-gone-after-creator-update.png&quot; title=&quot;控制台選項在 Creator Update 之後消失了&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/01-control-panel-link-is-gone-after-creator-update.png&quot; alt=&quot;控制台選項在 Creator Update 之後消失了&quot; title=&quot;控制台選項在 Creator Update 之後消失了&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;為了讓這個習慣得以延續下去，路不轉，人轉囉!! 以下就簡單的分享一下怎麼把控制台這個選項加回來的方法：&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;方法一：透過手動的方式加回來&lt;/h2&gt;

&lt;p&gt;基本上，Windows 10 開始按鈕右鍵選單的內容會存放在 &lt;code&gt;%USERPROFILE%\AppData\Local\Microsoft\Windows\WinX&lt;/code&gt; 資料夾裡。所以我們可以這樣作：&lt;/p&gt;

&lt;p&gt;首先，透過檔案總管瀏覽 &lt;code&gt;%USERPROFILE%\AppData\Local\Microsoft\Windows\WinX&lt;/code&gt; 資料夾，應該會看到裡面應該有三個分別名為 Group1 ~ 3 的資料夾。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/02-group-folders.png&quot; title=&quot;Group1 ~ Group3 資料夾&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/02-group-folders.png&quot; alt=&quot;Group1 ~ Group3 資料夾&quot; title=&quot;Group1 ~ Group3 資料夾&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;而屬於控制台的群組應該會位於 Group2 裡(我們會看到一個叫作控制台的連結，但是它其實是設定的捷徑)。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/03-links-in-group2.png&quot; title=&quot;Group2 裡的連結&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/03-links-in-group2.png&quot; alt=&quot;Group2 裡的連結&quot; title=&quot;Group2 裡的連結&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;接著我們就可以手動來為控制台建立一個捷徑囉。(若是使用 64 位元的 Windows 10 的話，路徑為 &lt;code&gt;C:\Windows\System32\control.exe&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/04-create-link-for-control-panel.png&quot; title=&quot;為控制台建立捷徑&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/04-create-link-for-control-panel.png&quot; alt=&quot;為控制台建立捷徑&quot; title=&quot;為控制台建立捷徑&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/05-name-the-link-with-control-panel.png&quot; title=&quot;將捷徑的名稱取為控制台&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/05-name-the-link-with-control-panel.png&quot; alt=&quot;將捷徑的名稱取為控制台&quot; title=&quot;將捷徑的名稱取為控制台&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;建立完捷徑之後得透過 &lt;code&gt;hashlnk.exe&lt;/code&gt;，來為我們的捷徑加上雜湊編碼，這樣 Windows 10 才會認得它。
加上雜湊編碼的方式很簡單，只要透過檔案總管將我們建立好的控制台連結拖拉進 hashlnk.exe 圖示上即可。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;hashlnk.exe 的下載連結在此： &lt;a href=&quot;https://github.com/riverar/hashlnk/raw/master/bin/hashlnk_0.2.0.0.zip&quot; title=&quot;下載 hashlnk.exe 檔&quot;&gt;下載 hashlnk.exe 檔&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/06-drag-link-into-hashlnk.png&quot; title=&quot;將控制台捷徑拖拉到 hashlnk.exe 的圖示上&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/06-drag-link-into-hashlnk.png&quot; alt=&quot;將控制台捷徑拖拉到 hashlnk.exe 的圖示上&quot; title=&quot;將控制台捷徑拖拉到 hashlnk.exe 的圖示上&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;接下來這個步驟非常的重要 - &lt;code&gt;開啟工作管理員，將檔案總管重新啟動&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/07-restart-explorer.png&quot; title=&quot;重新啟動檔案總管&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/07-restart-explorer.png&quot; alt=&quot;重新啟動檔案總管&quot; title=&quot;重新啟動檔案總管&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;完成上述動作就大功告成啦!!要驗證是否成功，只需要按下鍵盤的 Windows + X 鈕 (或是直接在開始按鈕上按下滑鼠右鍵)，噠噠!! ~~大師兄~~ 控制台回來了!!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/08-get-control-panel-link-back.png&quot; title=&quot;控制台回來了&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/08-get-control-panel-link-back.png&quot; alt=&quot;控制台回來了&quot; title=&quot;控制台回來了&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;h2 id=&quot;winxmenueditor-&quot;&gt;方法二：透過 WinXMenuEditor 加回來&lt;/h2&gt;

&lt;p&gt;覺得上述方式太麻煩的朋友們也不用擔心，因為有現成的工具可以使用。&lt;/p&gt;

&lt;p&gt;只要透過 WinXMenuEditor ，就可以輕鬆的以視覺化的方式把控制台的選項加回來囉!!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;WinXMenuEditor 的下載連結在此： &lt;a href=&quot;http://winaero.com/request.php?21&quot; title=&quot;下載 WinXMenuEditor 檔&quot;&gt;下載 WinXMenuEditor 檔&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;方法如下：&lt;/p&gt;

&lt;p&gt;在您想編輯的群組名稱上按下滑鼠右鍵，選取 &lt;code&gt;Add&lt;/code&gt; -&amp;gt; &lt;code&gt;Add a Control Panel item...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/09-add-control-panel-item.png&quot; title=&quot;選取 Add a Control Panel item&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/09-add-control-panel-item.png&quot; alt=&quot;選取 Add a Control Panel item&quot; title=&quot;選取 Add a Control Panel item&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;接著在出現的對話視窗中選取控制台，並且按下 Select 按鈕。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/10-select-control-panel.png&quot; title=&quot;選取 Add a Control Panel item&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/10-select-control-panel.png&quot; alt=&quot;選取 Add a Control Panel item&quot; title=&quot;選取 Add a Control Panel item&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;最後按下 Restart Explorer 按鈕以重新啟動檔案總管。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/11-click-restart-explorer-button.png&quot; title=&quot;按下 Restart Explorer 按鈕以重新啟動檔案總管&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-04-07-add-control-panel-back-after-creator-update/11-click-restart-explorer-button.png&quot; alt=&quot;按下 Restart Explorer 按鈕以重新啟動檔案總管&quot; title=&quot;按下 Restart Explorer 按鈕以重新啟動檔案總管&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;搞定!!~ 是不是也很方便呢?&lt;/p&gt;

&lt;p&gt;以上，希望對跟我一樣習慣能從開始按鈕開啟控制台的你有幫助喔!!~&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/04/07/add-control-panel-back-after-creator-update/&quot;&gt;回來吧!! Creator Update 開始按鈕右鍵選單裡的控制台選項!!&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on April 07, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[XAML 的過去、現在與未來]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/03/28/the-future-of-xaml/"/>
  <id>http://ouch1978.github.io/2017/03/28/the-future-of-xaml</id>
  <published>2017-03-28T23:50:00+08:00</published>
  <updated>2017-03-28 23:50:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#XAML" term="XAML" /><category scheme="http://ouch1978.github.io/tags/#Visual%20Studio" term="Visual Studio" /><category scheme="http://ouch1978.github.io/tags/#%E8%A8%AD%E8%A8%88" term="設計" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;自從 WPF 在 .Net Framework 3.0 中首度現身以來， XAML 就扮演了它的 UI 設計語言的角色。 時至今日，微軟在更多 UI/UX 的領域相繼投入了更多的關注在它身上。 透過這篇文章，我想用簡單快速的方式讓大家了解 XAML 的發展，也藉此跟大家介紹一個在 Visual Studio 2017 裡很方便，但不是新功能的功能。(好饒舌??)&lt;/p&gt;

&lt;h2 id=&quot;xaml-&quot;&gt;XAML 的過去&lt;/h2&gt;

&lt;p&gt;XAML 的全名為 E&lt;code&gt;x&lt;/code&gt;tensible &lt;code&gt;A&lt;/code&gt;pplication &lt;code&gt;M&lt;/code&gt;arkup &lt;code&gt;L&lt;/code&gt;anguage ，我們可以把它看作是結合了 XML 與 HTML 特性的使用者介面描述語言。 有了它的存在，讓 Windows 平台上的桌面應用程式有了全新的風貌和想像。
以往，由於平台本身限制的關係，藉由 Windows Form 撰寫的應用程式介面大多比較死板，相對的難以作到控制項隨著視窗縮放，也相對的難去實作出動畫和轉場效果。
甚至，如果沒有一定的底子和功力，想要在下拉式選單裡面塞圖片或是按鈕，就可以讓工程師為了這樣的需求刻上一整天的 UI。
而隨著 WPF 和 XAML 的出現，工程師們不用再攪盡腦汁去突破平台本身的限制，就可以輕鬆的透過 XAML 實作出上述的客製化控制項與動畫。&lt;/p&gt;

&lt;p&gt;在 WPF 之後， 微軟也推出了 Silverlight ，一個微軟想用來和 Adobe 的 Flash 抗衡的框架，其使用者介面描述語言也是 XAML。
之後， XAML 也相繼在 Windows Phone 7 、 Windows Phone 8 、 Windows 8/8.1 以及現在的 Windows 10、 Windows Mobile 10 、 XBox One 、 Hololens 這幾個平台中出現，作為 App 和作業系統中佔有重要地位的使用者介面描述語言。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;關於 XAML 的發展史，有人使用 TimelineJS 刻出了一個網頁： &lt;a href=&quot;http://japf.github.io/xaml-history/&quot; title=&quot;An history of 11 years of XAML stacks&quot;&gt;An history of 11 years of XAML stacks&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;儘管 Silverlight 已經成為歷史的一部份了，但是 XAML 在 UWP 的生態環境裡仍然佔有舉足輕重的地位。&lt;/p&gt;

&lt;h2 id=&quot;xaml--visual-studio-2017&quot;&gt;XAML 的現在與 Visual Studio 2017&lt;/h2&gt;

&lt;p&gt;有持續在關心 Windows 10 發展的朋友們應該知道， Windows 10 的開始功能表就是透過 XAML 實作出來的。
微軟也在不同的會議及活動中承諾會持續針對 XAML 投入更多的心力，例如提供了開發 UWP 時可以使用的 &lt;a href=&quot;https://github.com/Microsoft/UWPCommunityToolkit&quot; title=&quot;UWP Community Toolkit&quot;&gt;UWP Community Toolkit&lt;/a&gt; ，內建更多的控制項和特效以及其它方便的功能。&lt;/p&gt;

&lt;p&gt;除此之外，微軟在 Visual Studio 上也為 XAML 開發者們提供了實用的 &lt;code&gt;XAML Edit &amp;amp; Continue&lt;/code&gt; 功能。&lt;/p&gt;

&lt;p&gt;平常有在以 C# 撰寫程式的朋友們應該對 Edit &amp;amp; Continue 的功能不陌生，也應該因為它的存在，在進行除錯的的時候得到了不少的幫助。
而自從 Visual Studio 2015 Update 2 推出之後， XAML 開發者們也能享受到相同的好處，透過 XAML Edit &amp;amp; Continue 的功能在進行除錯的同時，也可以透過所視即所得的方式同時以 XAML 語法編輯你的 UI。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-03-28-the-future-of-xaml/01-xaml-edit-and-continue.gif&quot; title=&quot;透過 XAML Edit &amp;amp; Continue 功能在除錯時編輯 UI&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-03-28-the-future-of-xaml/01-xaml-edit-and-continue.gif&quot; alt=&quot;透過 XAML Edit &amp;amp; Continue 功能在除錯時編輯 UI&quot; title=&quot;透過 XAML Edit &amp;amp; Continue 功能在除錯時編輯 UI&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;我們也可以透過 Live Visual Tree 面板來觀查我們所設計出來的 UI 的視覺樹是什麼樣的構造，這個在我們想自已刻控制項或是效能校調的時候是非常有幫助的一個功能。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-03-28-the-future-of-xaml/02-live-visual-tree.gif&quot; title=&quot;透過 Live Visual Tree 面板觀查視覺樹結構&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-03-28-the-future-of-xaml/02-live-visual-tree.gif&quot; alt=&quot;透過 Live Visual Tree 面板觀查視覺樹結構&quot; title=&quot;透過 Live Visual Tree 面板觀查視覺樹結構&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;同時，也可以透過 Live Property Explorer 來即時的對視覺樹中的控制項進行屬性的編輯並且即時看到效果，而不影響 XAML Code。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-03-28-the-future-of-xaml/03-live-property-explorer.gif&quot; title=&quot;透過 Live Property Explorer 修改控制項屬性&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-03-28-the-future-of-xaml/03-live-property-explorer.gif&quot; alt=&quot;透過 Live Property Explorer 面板修改控制項屬性&quot; title=&quot;透過 Live Property Explorer 修改控制項屬性&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;是不是很方便啊!?&lt;/p&gt;

&lt;p&gt;當然，這些方便的功能也都一併被內建在 Visual Studio 2017 裡面囉!!&lt;/p&gt;

&lt;h2 id=&quot;xaml--1&quot;&gt;XAML 的未來以及相關資源&lt;/h2&gt;

&lt;p&gt;有陸續在關心 Windows 10 發展的朋友們應該也都跟我一樣很期待 Creator Update 正式版的發佈日期。&lt;/p&gt;

&lt;p&gt;除了 Creator Update 之外，微軟也宣佈了 Neon 專案，據說會重新定義 Microsoft Design Language 及部份控制項，並且在 Windows Vista 和 Windows 7 時代的毛玻璃效果也會隨之回歸。&lt;/p&gt;

&lt;p&gt;如果你也對 XAML 及 UI/UX 設計有興趣，這裡還有一些不錯的資源可以參考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://channel9.msdn.com/Events/Build/2016/The-Future-of-XAML&quot; title=&quot;The Future of XAML&quot;&gt;The Future of XAML&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://aka.ms/winuidevlabs&quot; title=&quot;Windows UI Samples&quot;&gt;Windows UI Samples&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://aka.ms/windowsuwpsamples&quot; title=&quot;Other UWP Samples&quot;&gt;Other UWP Samples&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
&lt;/ul&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/03/28/the-future-of-xaml/&quot;&gt;XAML 的過去、現在與未來&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on March 28, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[透過 Material Design Xaml Toolkit 讓你的 WPF 應用程式潮又有料]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/03/25/material-design-xaml-toolkit/"/>
  <id>http://ouch1978.github.io/2017/03/25/material-design-xaml-toolkit</id>
  <published>2017-03-25T23:50:00+08:00</published>
  <updated>2017-03-28 23:50:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#C%23" term="C#" /><category scheme="http://ouch1978.github.io/tags/#WPF" term="WPF" /><category scheme="http://ouch1978.github.io/tags/#Visual%20Studio" term="Visual Studio" /><category scheme="http://ouch1978.github.io/tags/#Material%20Design%20Xaml%20Toolkit" term="Material Design Xaml Toolkit" /><category scheme="http://ouch1978.github.io/tags/#%E8%A8%AD%E8%A8%88" term="設計" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在開發應用程式的時候， UI 和 UX 往往都是最讓工程師們最頭痛的地方。特別是以 XAML 設計應用程式外觀的時候，彈性更大，可以客製化的程度高；要設計出一個華麗又實用的系統，就得花更多時間在設計上。
雖然我們還是可以偷 Windows Presentation Framework 裡面內建的主題來使用，或是參考我古早以前的 &lt;a href=&quot;https://dotblogs.com.tw/ouch1978/2011/03/10/wpf-introducing-wpf-themes&quot;&gt;快速為WPF換裝 - 使用WPF Themes&lt;/a&gt; 一文裡所提到的 &lt;a href=&quot;http://wpfthemes.codeplex.com/&quot;&gt;WPF Themes&lt;/a&gt; 來快速幫 WPF 應用程式換上新衣。
不過，那些主題和目前流行的 Material Desing 風格還是有極大差異的。
現在，就有人開發出了符合 Google 的 Material Design 原則的 WPF 主題，只要輕鬆幾個步驟，就能讓 WPF 應用程式變得美美的喔!!&lt;/p&gt;

&lt;p&gt;有圖有真相，我們先來看看套用它之後跑起來會長什麼樣子：  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-03-25-material-design-xaml-toolkit/00-material-design-xaml-toolkit-in-live.gif&quot; title=&quot;套用 MaterialDesignXamlToolkit 的應用程式&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-03-25-material-design-xaml-toolkit/00-material-design-xaml-toolkit-in-live.gif&quot; alt=&quot;套用 MaterialDesignXamlToolkit 的應用程式&quot; title=&quot;套用 MaterialDesignXamlToolkit 的應用程式&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;安裝與基本使用&lt;/h2&gt;

&lt;p&gt;廢話不多說，馬上透過 VS 好朋友 - Blend for Visual Studio 2017 來為大家示範怎麼使用。&lt;/p&gt;

&lt;p&gt;首先我們透過 Blend 來建立一個 WPF 專案，接著透過 Manage NuGet Packages… 功能以 &lt;code&gt;MaterialDesignThemes&lt;/code&gt; 為關鍵字搜尋並且安裝該套件，如下圖：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-03-25-material-design-xaml-toolkit/01-install-through-nuget.png&quot; title=&quot;搜尋並安裝 MaterialDesignThemes 套件&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-03-25-material-design-xaml-toolkit/01-install-through-nuget.png&quot; alt=&quot;搜尋並安裝 MaterialDesignThemes 套件&quot; title=&quot;搜尋並安裝 MaterialDesignThemes 套件&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;安裝完畢之後，就可以開啟專案中的 &lt;code&gt;App.xaml&lt;/code&gt; 檔來進行初步主題的套用囉。&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;App.xaml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Application&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wpf_MaterialDesignXamlToolkitSample.App&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:local=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Wpf_MaterialDesignXamlToolkitSample&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;StartupUri=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MainWindow.xaml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Application.Resources&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary.MergedDictionaries&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!--設定主題背景色--&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Dark.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!--套用基本控制項樣式--&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!--設定主色--&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Red.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!--設定輔色--&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Red.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ResourceDictionary.MergedDictionaries&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ResourceDictionary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Application.Resources&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Application&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;關於主色和輔色選用的部份，請參考 &lt;a href=&quot;https://material.io/guidelines/style/color.html#color-color-palette&quot; title=&quot;Color palette&quot;&gt;Material Design 官網的介紹文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;接下來，在我們編輯 &lt;code&gt;MainPage.xaml&lt;/code&gt; 的內容之前，我們得先透過 &lt;code&gt;TextElement.Foreground&lt;/code&gt; 和 &lt;code&gt;Background&lt;/code&gt; 屬性來設定視窗的文字顏色以及背景色。&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;MainPage.xaml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Window&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wpf_MaterialDesignXamlToolkitSample.MainWindow&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;xmlns:d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/expression/blend/2008&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;xmlns:mc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;xmlns:local=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Wpf_MaterialDesignXamlToolkitSample&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;TextElement.Foreground=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource MaterialDesignBody}&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Background=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource MaterialDesignPaper}&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;mc:Ignorable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;d&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MainWindow&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;350&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;525&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Grid&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Window&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;完成之後，就可以在裡面擺放控制項啦!!~&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;使用內建圖示&lt;/h2&gt;

&lt;p&gt;Material Design 的精神之一，就是使用圖示來替代文字，透過簡單明瞭的圖示來傳達訊息給使用者。
關於這點，作者也替我們”傳便便”。 MaterialDesignXamlToolkit 裡內建了數百個圖示給我們使用，使用方法也很簡單，只要在頁面上參考 &lt;code&gt;http://materialdesigninxaml.net/winfx/xaml/themes&lt;/code&gt; 這個命名空間，使用裡面的 PackIcon 控制項，再透過 Kind 屬性來選取要使用的圖示即可。(是不是超級方便的啊!!!?)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;關於可使用的圖示資訊，請參考 &lt;a href=&quot;https://materialdesignicons.com/&quot; title=&quot;Material Design Icons&quot;&gt;Material Design Icons&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-3&quot;&gt;特殊控制項與特效&lt;/h2&gt;

&lt;p&gt;能改變原來控制項的樣貌已經夠威猛了對吧?! 不過這還不夠， MaterialDesignXamlToolkit 裡面還要給你滿滿的原創控制項和特效!!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Card - 類似小卡片的容器控制項。&lt;/li&gt;
  &lt;li&gt;Chip - 楕圓型外框的控制項，可以另外在前面加上圖示或是文字。(嗯…其實我不知道該怎麼更精確的形容它…)&lt;/li&gt;
  &lt;li&gt;ColourZone - 顏色區塊，適合放在頁面的上方搭配不同的控制項(例如漢堡選單)作為選單或是查詢功能使用。&lt;/li&gt;
  &lt;li&gt;Dialog - 看名字就知道了，是對話視窗。&lt;/li&gt;
  &lt;li&gt;Drawer - 抽屜，就是可以放置於視窗上、下、左、右的可收合面板。&lt;/li&gt;
  &lt;li&gt;Flipper - 類似於 Card 控制項，但是可以讓我們分別針對正面及反面設置不同的呈現內容。&lt;/li&gt;
  &lt;li&gt;PopupBox - 彈出式的容器，適合用來實作簡易型選單的功能。&lt;/li&gt;
  &lt;li&gt;SnackBar - 會自動收合的訊息列。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;套用視窗外觀&lt;/h2&gt;

&lt;p&gt;除了視窗裡面的控制項符合 Material Desing 的風格之外，視窗本身會不會也想換個顏色來個裡應外合呢?
沒問題，作者都幫我們準備好了!!&lt;/p&gt;

&lt;p&gt;要連視窗都一起套用顏色的話，只需要透過 Nuget 安裝 &lt;code&gt;MaterialDesignThemes.MahApps&lt;/code&gt; 套件。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-03-25-material-design-xaml-toolkit/02-install-materialdesignthemes-mahapps-package.png&quot; title=&quot;透過 Nuget 安裝 MaterialDesignThemes.MahApps 套件&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-03-25-material-design-xaml-toolkit/02-install-materialdesignthemes-mahapps-package.png&quot; alt=&quot;透過 Nuget 安裝 MaterialDesignThemes.MahApps 套件&quot; title=&quot;透過 Nuget 安裝 MaterialDesignThemes.MahApps 套件&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;接著進一步的修改 App.xaml 檔的內容：&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;App.xaml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Application&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wpf_MaterialDesignXamlToolkitSample.App&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:local=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Wpf_MaterialDesignXamlToolkitSample&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;StartupUri=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MainWindow.xaml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Application.Resources&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary.MergedDictionaries&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 加入 MahApps 相關資源 --&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseDark.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;c&quot;&gt;&amp;lt;!--設定主題背景色--&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Dark.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!--套用基本控制項樣式--&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!--設定主色--&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Red.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!--設定輔色--&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Red.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 加入與 MahApps 相容的相關資源 --&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MaterialDesignThemes.MahApps;component/Themes/MaterialDesignTheme.MahApps.Fonts.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ResourceDictionary&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pack://application:,,,/MaterialDesignThemes.MahApps;component/Themes/MaterialDesignTheme.MahApps.Flyout.xaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ResourceDictionary.MergedDictionaries&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 加入筆刷資源 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;SolidColorBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HighlightBrush&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource Primary700}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;SolidColorBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AccentColorBrush&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource Primary500}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;SolidColorBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AccentColorBrush2&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource Primary400}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;SolidColorBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AccentColorBrush3&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource Primary300}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;SolidColorBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AccentColorBrush4&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource Primary200}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;SolidColorBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WindowTitleColorBrush&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource Primary700}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;SolidColorBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AccentSelectedColorBrush&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource Primary500Foreground}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearGradientBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ProgressBrush&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;EndPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.001,0.5&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;StartPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.002,0.5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource Primary700}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource Primary300}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;SolidColorBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CheckmarkFill&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource Primary500}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;SolidColorBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RightArrowFill&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource Primary500}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;SolidColorBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IdealForegroundColorBrush&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource Primary500Foreground}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;SolidColorBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IdealForegroundDisabledBrush&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource Primary500}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Opacity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.4&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ResourceDictionary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Application.Resources&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Application&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;再來只需要把原來視窗的 Window 型別改成 &lt;code&gt;http://metro.mahapps.com/winfx/xaml/controls&lt;/code&gt; 命名空間中的 &lt;code&gt;MetroWindow&lt;/code&gt; 型別就搞定啦!!&lt;/p&gt;

&lt;p&gt;執行起來就會像下圖這樣喔!! 是不是很酷炫啊!?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-03-25-material-design-xaml-toolkit/03-apply-material-design-themes-mahapps.png&quot; title=&quot;套用 MaterialDesignThemes.MahApps 後的視窗樣貌&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-03-25-material-design-xaml-toolkit/03-apply-material-design-themes-mahapps.png&quot; alt=&quot;套用 MaterialDesignThemes.MahApps 後的視窗樣貌&quot; title=&quot;套用 MaterialDesignThemes.MahApps 後的視窗樣貌&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;總結&lt;/h2&gt;

&lt;p&gt;MaterialDesignXamlToolkit 真的是非常強大，我只能介紹部份的功能給大家。
官方 GitHub 上的範例遠比我介紹的部份來得詳盡許多，而且也和它的 Wiki 作了不錯的整合。
雖然作者也有意推出 UWP 版，不過目前還在開發當中，有興趣的朋友們不妨也一起參與開發，或是直接打賞作者，讓他有繼續開發的動力喔!!&lt;/p&gt;

&lt;p&gt;最後，我在這篇文章裡所撰寫的範例程式碼連結如下，歡迎任意取用：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Ouch1978/Wpf_MaterialDesignXamlToolkitSample/&quot;&gt;&lt;img src=&quot;/images/blog-images/source-code-link.png&quot; alt=&quot;Wpf_MaterialDesignXamlToolkitSample&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/03/25/material-design-xaml-toolkit/&quot;&gt;透過 Material Design Xaml Toolkit 讓你的 WPF 應用程式潮又有料&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on March 25, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[透過 Sikuli4Net 對 Flash UI 進行自動化測試]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/02/04/automation-flash-ui-test-with-sikuli4net/"/>
  <id>http://ouch1978.github.io/2017/02/04/automation-flash-ui-test-with-sikuli4net</id>
  <published>2017-02-04T23:50:00+08:00</published>
  <updated>2017-02-04 23:50:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#C%23" term="C#" /><category scheme="http://ouch1978.github.io/tags/#Sikuli4Net" term="Sikuli4Net" /><category scheme="http://ouch1978.github.io/tags/#Visual%20Studio" term="Visual Studio" /><category scheme="http://ouch1978.github.io/tags/#Coded%20UI%20Test" term="Coded UI Test" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在導入 CI/CD 的時候，能將測試自動化是很重要的一個環節。 然而，除了「&lt;code&gt;工程師生出來就應該要會&lt;/code&gt;」的 Unit Test 之外， UI 的自動化測試也很重要。&lt;/p&gt;

&lt;p&gt;基於大部份的工具都難以辨識以 Flash / Flex 編寫的 UI 裡面的元件的關係，因此大多數有需要針對 Flash UI 進行測試的需求時，最常使用的方式就是直接錄製滑鼠和鍵盤的動作。 這個方式固然可行，但是一來程式碼相對的複雜(可能得引用到 Windows API)、入門的門檻相對提高；二來，一旦 Flash 或是視窗的位置不小心跑掉，整個測試就會失敗了。&lt;/p&gt;

&lt;p&gt;針對上述的兩個問題，讓我好奇是不是還有更好的方式可以讓我們以更簡單、有效率，而且更準確的方式來針對 Flash UI 進行自動化測試，而且最好能和 Selenium 混搭。 最後，總算讓我找到另一條出路啦，也就是今天要介紹的主角 – &lt;a href=&quot;https://www.nuget.org/packages/Sikuli4Net&quot; title=&quot;Sikuli4Net - Call Sikuli from your .NET project&quot;&gt;Sikuli4Net&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;其實 Sikuli 本來是一個以 Java 為基礎而開發出來的工具，從 2009 年開始了這個專案，在 2012 年正式完成。 主要的開發者 &lt;a href=&quot;http://blog.vgod.tw/2010/01/30/sikuli/&quot; title=&quot;vgod&quot;&gt;vgod&lt;/a&gt; 也是台灣人喔!!(台灣之光!! 灑花~~~~ 關於 Sikuli 的詳細發展史，請參閱&lt;a href=&quot;https://en.wikipedia.org/wiki/Sikuli&quot; title=&quot;Sikuli - Wiki&quot;&gt;維基百科&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Sikuli 主要的功能和特色是：讓我們以擷圖的方式，取代我們的眼睛，再透過 Sikuli 幫我們進行比對，找到目標控制項，並且和它進行互動。&lt;/p&gt;

&lt;p&gt;不過，前面已經提到了， Sikuli 是以 Java 為基礎開發的，所以沒辦法直接透過 .Net / C# 呼叫，得要透過 Wrapper 多包一層才能給 .Net 使用。 而這個包好可以給 .Net 使用的版本， 在 Nuget 上也有兩三種，不過最後我還是選擇了 Sikuli4Net。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;使用方式&lt;/h2&gt;

&lt;p&gt;介紹了那麼多，光說不練是不夠的，接下來我們就來透過一個實例，見證透過 Sikuli4Nnet 為我們帶來的奇蹟吧!!&lt;/p&gt;

&lt;p&gt;在我們開始之前，得先確認你的電腦裡面得有安裝 Java Runtime Environment 6 以上的版本(這個應該每個人都有吧?)，否則會出現系統找不到檔案的錯誤。&lt;/p&gt;

&lt;p&gt;第一步當然就開啟地表最強的開發工具 - Visual Studio 建立我們的測試專案囉。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-02-04-automation-flash-ui-test-with-sikuli4net/01-create-coded-ui-test-project.png&quot; title=&quot;建立 Coded UI Test 專案&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-02-04-automation-flash-ui-test-with-sikuli4net/01-create-coded-ui-test-project.png&quot; alt=&quot;建立 Coded UI Test 專案&quot; title=&quot;建立 Coded UI Test 專案&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;接著， Visual Studio 會貼心的問我們要用什麼方式建立程式碼，這邊我直接按下 Cancel 鈕。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-02-04-automation-flash-ui-test-with-sikuli4net/02-click-cancel-to-bypass-ui-recording.png&quot; title=&quot;不使用錄製的方式建立程式碼&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-02-04-automation-flash-ui-test-with-sikuli4net/02-click-cancel-to-bypass-ui-recording.png&quot; alt=&quot;不使用錄製的方式建立程式碼&quot; title=&quot;不使用錄製的方式建立程式碼&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;再來，透過 Nuget 安裝以下的元件庫吧。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Selenium.WebDriver&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Selenium.Support&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Selenium.WebDriver.ChromeDriver&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sikuli4Net&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安裝完需要使用的元件庫之後，就可以找一個 Flash 小遊戲來試刀了。&lt;/p&gt;

&lt;p&gt;為了完成這個範例，我在網路上隨便找了一個 &lt;a href=&quot;https://en.wikipedia.org/wiki/Sikuli&quot; title=&quot;Flash 算命小遊戲&quot;&gt;Flash 算命小遊戲&lt;/a&gt;來作為我測試的目標。&lt;/p&gt;

&lt;p&gt;為了證明 Sikuli4Net 可以和 Selenium 混搭使用，所以這裡就簡單的透過 Selenium 的 ChromeDriver 來幫我們用 Chrome 開啟目標網頁。&lt;/p&gt;

&lt;p&gt;準備工作完成之後，就可以開始準備使用擷圖工具來把目標控制項的部份擷取下來並且加入到專案裡了。&lt;/p&gt;

&lt;p&gt;以這次的範例來說，我會先在專案中建立一個名為 Images 的資料夾，再分別把 Flash 中需要點擊或是輸入文字的控制項分別擷圖存檔，並且放進 Images 資料夾中。&lt;/p&gt;

&lt;p&gt;這邊有很重要的一點 – &lt;code&gt;圖檔的 Copy to Output Directory 屬性記得要設為 Copy always&lt;/code&gt; ，不然在執行的時候會出錯喔。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-02-04-automation-flash-ui-test-with-sikuli4net/03-prepare-screenshot-for-components.png&quot; title=&quot;Copy to Output Directory 屬性記得要設為 Copy always&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-02-04-automation-flash-ui-test-with-sikuli4net/03-prepare-screenshot-for-components.png&quot; alt=&quot;Copy to Output Directory 屬性記得要設為 Copy always&quot; title=&quot;Copy to Output Directory 屬性記得要設為 Copy always&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;這些動作都完成了之後，再來就是透過 Sikuli4Net 提供的 API 來撰寫我們的測試啦!!&lt;/p&gt;

&lt;p&gt;完整的程式碼如下：&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;CodedUITest1.cs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.VisualStudio.TestTools.UITesting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.VisualStudio.TestTools.UnitTesting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OpenQA.Selenium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OpenQA.Selenium.Chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sikuli4Net.sikuli_REST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sikuli4Net.sikuli_UTIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Threading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SikuliCodedUITestProject&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CodedUITest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CodedUITest1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IWebDriver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;APILauncher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_launcher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;APILauncher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CodedUITest1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Additional&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// You can use the following additional attributes as you write your tests:
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Use TestInitialize to run code before running each test
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestInitialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyTestInitialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_launcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ChromeDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Manage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Maximize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Navigate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GoToUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://www.xingzuo360.cn/uploads/media/121030/1-1210300F426.swf&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//Use TestCleanup to run code after each test has run
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyTestCleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_launcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endregion&lt;/span&gt;


        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DeploymentItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Images\\&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Images\\&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CodedUITestMethod1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//定義目前的畫面為偵測區
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;Screen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//透過 Pattern 類別宣告並定義要比對的控制項擷圖
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseDirectory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;\Images\Go.png&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseDirectory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;\Images\Name.png&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;birthdayField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseDirectory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;\Images\Birthday.png&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseDirectory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;\Images\Gender.png&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bloodType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseDirectory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;\Images\BloodType.png&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placeField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseDirectory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;\Images\PlaceGrownUp.png&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;okButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseDirectory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;\Images\OkButton.png&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseDirectory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;\Images\Result.png&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//等待 go 按鈕出現
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;mainPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//對 go 按鈕按下滑鼠左鍵
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;mainPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//在姓名欄位輸入文字
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;mainPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ouch&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//在生日欄位輸入文字
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;mainPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;birthdayField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;19781128&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//點選男性
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;mainPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//點選 B 型
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;mainPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bloodType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//在成長地點欄位輸入文字
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;mainPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placeField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Taipei&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//按下 Ok 按鈕
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;mainPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;okButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//以結果是否出現作為判斷測試成功的條件
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;專案原始檔連結在此，歡迎自行取用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Ouch1978/Sikuli4NetCodedUITestSample/&quot;&gt;&lt;img src=&quot;/images/blog-images/source-code-link.png&quot; alt=&quot;Sikuli4NetCodedUITestSample&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;注意事項 / 小心得&lt;/h2&gt;

&lt;p&gt;基本上，透過 Sikuli4Net 應該可以完成我們通常會對 Flash UI 進行的大部份操作。 不過如果想要針對長相一樣的多個控制項進行重複操作的話，這個部份我就還沒摸出來了。&lt;/p&gt;

&lt;p&gt;另外，建議擷圖的部份儘量擷取比控制項還要大一點點的範圍，以提升比對準確度，如果 Flash 裡面有動畫或是需要等待它載入的話，也可以適當的透過 Thread.Sleep() 方法延緩測式的時間。&lt;/p&gt;

&lt;p&gt;以上，如果你手邊也有古早的 Flash UI 需要測試的話，不妨也試看看 Sikuli4Net 吧~&lt;/p&gt;

&lt;p&gt;當然，如果你有更好用、更簡便的方法或工具，也歡迎不吝分享喔!!~&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/02/04/automation-flash-ui-test-with-sikuli4net/&quot;&gt;透過 Sikuli4Net 對 Flash UI 進行自動化測試&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on February 04, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[部落格備份/搬家小工具 - Html to MD Exporter]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/02/03/html-to-md-exporter/"/>
  <id>http://ouch1978.github.io/2017/02/03/html-to-md-exporter</id>
  <published>2017-02-03T22:30:00+08:00</published>
  <updated>2017-02-03 22:30:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#C%23" term="C#" />
  <content type="html">
  
    &lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;忘記是去年的哪個時候，看到了強者我同事 &lt;a href=&quot;https://github.com/blackie1019&quot; title=&quot;Blackie - 強者我同事&quot;&gt;小黑&lt;/a&gt; 用著 Markdown 語法寫他的部落格文章，然後透過一連串幾近自動化的流程上傳到 GitHub 上…
當時的我，默默的看著我許久沒打開的 Windows Live Writer，再默默的看了一下我許久沒新文章的部落格…&lt;/p&gt;

&lt;p&gt;「嗯，絕對不能再這樣下去!!」當時的我心裡默默的想著。「該是動手學點新東西的時候了!!」
「嗯!! 我也要用 Markdown 寫文章，然後把我的文章也搬到 GitHub.io 上去!!」&lt;/p&gt;

&lt;p&gt;但是，現實是很殘酷的，我之前習慣使用的 Windows Live Writer 大改版，改版過後的點部落也不再支援 Windows Live Writer ，再加上我之前本來就沒有備份文章的習慣，現在更沒辦法透過 Windows Live Writer 把文章同步回來…&lt;/p&gt;

&lt;p&gt;「那就自己寫吧!!」當我問強者小黑可以怎麼辦的時候，他這樣回答。&lt;/p&gt;

&lt;p&gt;「對啊~那就自己寫吧!!」&lt;/p&gt;

&lt;p&gt;(以上廢文)
  —&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;因為我原來使用的部落格平台是點部落，所以這個小工具目前使用的參數都是針對點部落而設計的，但是理論上只要稍作修改，也可以支援其他平台才對。&lt;/p&gt;

&lt;p&gt;這個小工具基本上運作的流程如下：
&lt;a href=&quot;/images/blog-images/2017-02-03-html-to-md-exporter/01-flow-of-htm-to-md-exporter.png&quot; title=&quot;HtmlToMdExporter 運作流程&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-02-03-html-to-md-exporter/01-flow-of-htm-to-md-exporter.png&quot; alt=&quot;HtmlToMdExporter 運作流程&quot; title=&quot;HtmlToMdExporter 運作流程&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;解析 HTML 的部份使用的是 &lt;a href=&quot;https://www.nuget.org/packages/HtmlAgilityPack/&quot; title=&quot;HtmlAgilityPack&quot;&gt;HtmlAgilityPack&lt;/a&gt; ，將 HTML 轉換成 Markdown 語法的部份則是使用 &lt;a href=&quot;https://www.nuget.org/packages/Html2Markdown/&quot; title=&quot;Html2Markdown&quot;&gt;Html2Markdown&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;基於 Markdown 語法本身支援的限制，有部份的 HTML 標籤 (例如文字顏色、 iFrame 、 表格等等) 將不會被轉換，不過在顯示上應該還是沒問題的。&lt;/p&gt;

&lt;p&gt;程式的主畫面如下圖：
&lt;a href=&quot;/images/blog-images/2017-02-03-html-to-md-exporter/02-main-window-of-html-to-md-exporter.png&quot; title=&quot;HtmlToMdExporter 主畫面&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-02-03-html-to-md-exporter/02-main-window-of-html-to-md-exporter.png&quot; alt=&quot;HtmlToMdExporter 主畫面&quot; title=&quot;HtmlToMdExporter 主畫面&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;基本上，如果你也是要從點部落把文章轉出來的話，只需要填入帳號應該就可以按下 Go 按鈕進行轉換了。如果你使用的是其他的平台，則可能需要自行替換掉畫面上顯示欄位的 XPath 值。&lt;/p&gt;

&lt;p&gt;附上程式的原始碼連結，歡迎有興趣的朋友們自行取用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Ouch1978/HtmlToMdExporter&quot;&gt;&lt;img src=&quot;/images/blog-images/source-code-link.png&quot; alt=&quot;HtmlToMdExporter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;後記&lt;/h2&gt;

&lt;p&gt;要從已經用了五年以上的平台轉移到另一個全新的平台，的確是讓人很掙扎的一件事。&lt;/p&gt;

&lt;p&gt;歷經了不同時期的各種阻礙(點部落的WebService被封鎖、Windows Live Writer改版、我的硬碟掛掉、點部落改版…)，我想，會讓我決定轉換平台的三大原因，主要是下面三項：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;我個人習慣使用離線工具撰寫文章。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我想要使用有自我風格的主題和樣版，以及更多能自訂功能的部份。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我喜歡 Markdown 語法的簡潔，也想藉這個機會接觸 GitHub 和 GitHub.io。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;經過一番比較之後，使用 Atom 作為我的寫作工具、搭配 Jekyll 和 GitHub.io 剛好能滿足我的需求，研究了幾天之後，也順利的成功上架第一篇文章。&lt;/p&gt;

&lt;p&gt;不過，在這邊，還是得特別感謝一直以來默默提供免費平台的點部落，以及背後辛苦付出的歷代管理者群們，特別是開國元老的大鈞和 Jon 哥，還有現在接手的 Demo 大大。&lt;/p&gt;

&lt;p&gt;因為有你們的付出，讓台灣的開發者們得以有一個空間可以記錄、分享自己的知識，也造就了今天的我。&lt;/p&gt;

&lt;p&gt;如果，你也在尋找一個以開發者為主要客群的部落格平台，而且你已經習慣使用 Web 上的編輯工具作為你主要的寫作工具的話，依據我個人的經驗，點部落絕對是你的首選。&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/02/03/html-to-md-exporter/&quot;&gt;部落格備份/搬家小工具 - Html to MD Exporter&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on February 03, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[初探 Visual Studio 2017 RC - 程式撰寫體驗篇]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/01/31/first-look-on-vs2017-rc-general-coding-enhancement/"/>
  <id>http://ouch1978.github.io/2017/01/31/first-look-on-vs2017-rc-general-coding-enhancement</id>
  <published>2017-01-31T06:30:00+08:00</published>
  <updated>2017-01-31 06:30:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Visual%20Studio" term="Visual Studio" />
  <content type="html">
  
    &lt;p&gt;繼兩篇分別討論安裝與使用者體驗增強的文章之後，接下來要和大家分享的是 Visual Studio 2017 RC 在程式碼撰寫體驗增強的部份。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;強化的程式碼巡覽功能&lt;/h2&gt;

&lt;p&gt;Visual Studio 2017 RC 在程式碼巡覽的功能方面有不少的加強，之前有些得要安裝 Resharper 才能達到的功能現在都內建了。不過要特別注意的是，若您已經有安裝 Resharper 的話，部份熱鍵會被 Resharper 的功能取代，在使用上得特別注意一下。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Go To (熱鍵為 &lt;code&gt;Ctrl + T&lt;/code&gt; 或 &lt;code&gt;Ctrl + ,&lt;/code&gt;) ：可以針對不同種類的範圍進行查找並且前往，可以透過點選圖示切換目標種類或是直接在文字框中輸入前置字元切換搜尋範圍。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Go to All ：針對所有支援的範圍進行查找並前往。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/01-code-navigation-go-to-all.png&quot; title=&quot;Go to All&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/01-code-navigation-go-to-all.png&quot; alt=&quot;Go to All&quot; title=&quot;Go to All&quot; /&gt;&lt;/a&gt;    &lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Go to Line (熱鍵為 &lt;code&gt;Ctrl + G&lt;/code&gt; ，前置字元為 &lt;code&gt;:&lt;/code&gt; )：直接前往指定的行數。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/02-code-navigation-go-to-line.png&quot; title=&quot;Go to Line&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/02-code-navigation-go-to-line.png&quot; alt=&quot;Go to Line&quot; title=&quot;Go to Line&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Go to File (熱鍵為 &lt;code&gt;Ctrl + 1 -&amp;gt; Ctrl + F&lt;/code&gt; ，前置字元為 &lt;code&gt;f&lt;/code&gt; )：前往指定的檔案。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/03-code-navigation-go-to-file.png&quot; title=&quot;Go to File&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/03-code-navigation-go-to-file.png&quot; alt=&quot;Go to File&quot; title=&quot;Go to File&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Go to Type (熱鍵為 &lt;code&gt;Ctrl + 1 -&amp;gt; Ctrl + T&lt;/code&gt; ，前置字元為 &lt;code&gt;t&lt;/code&gt; )：前往指定的型別。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/04-code-navigation-go-to-type.png&quot; title=&quot;Go to Type&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/04-code-navigation-go-to-type.png&quot; alt=&quot;Go to Type&quot; title=&quot;Go to Type&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Go to Member (熱鍵為 &lt;code&gt;Ctrl + 1 -&amp;gt; Ctrl + M&lt;/code&gt; ，前置字元為 &lt;code&gt;m&lt;/code&gt; )：前往指定的成員。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/05-code-navigation-go-to-member.png&quot; title=&quot;Go to Member&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/05-code-navigation-go-to-member.png&quot; alt=&quot;Go to Member&quot; title=&quot;Go to Member&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Go to Symbol (熱鍵為 &lt;code&gt;Ctrl + 1 -&amp;gt; Ctrl + S&lt;/code&gt; ，前置字元為 &lt;code&gt;#&lt;/code&gt; )：前往指定的符號。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/06-code-navigation-go-to-symbol.png&quot; title=&quot;Go to Symbol&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/06-code-navigation-go-to-symbol.png&quot; alt=&quot;Go to Symbol&quot; title=&quot;Go to Symbol&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;另外，Go To 的功能也可以在功能表中的的 Edit 項目下面找到喔!!
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/07-code-navigation-go-to-from-edit-menu.png&quot; title=&quot;透過功能表使用 Go to&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/07-code-navigation-go-to-from-edit-menu.png&quot; alt=&quot;透過功能表使用 Go to&quot; title=&quot;透過功能表使用 Go to&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find All References (熱鍵為 &lt;code&gt;Shift + F12&lt;/code&gt;，目前支援 C# 、 VB 和 C++ 三種語言) ： Find All References 經過這次改版的翻修之後，除了針對 C# 和 VB 兩種語言提供搜尋結果上色功能的支援之外，還有下列實用的功能：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;提供了更進一步的群組、篩選、排序相關的功能。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/08-overhauled-find-all-references-group-by-options.png&quot; title=&quot;Find All References - Group By 提供的選項&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/08-overhauled-find-all-references-group-by-options.png&quot; alt=&quot;Find All References - Group By 提供的選項&quot; title=&quot;Find All References - Group By 提供的選項&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;針對結果進行再度的搜尋功能。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/09-overhauled-find-all-references-search-in-results.gif&quot; title=&quot;Find All References - 於結果中搜尋&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/09-overhauled-find-all-references-search-in-results.gif&quot; alt=&quot;Find All References - 於結果中搜尋&quot; title=&quot;Find All References - 於結果中搜尋&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;可以透過 &lt;code&gt;Keep Results&lt;/code&gt; 按鈕來保留目前搜尋的結果。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/10-overhauled-find-all-references-keep-results.png&quot; title=&quot;按下 Keep Results 後，結果會在下面的頁籤中保留&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/10-overhauled-find-all-references-keep-results.png&quot; alt=&quot;Find All References - 按下 Keep Results 後，結果會在下面的頁籤中保留&quot; title=&quot;按下 Keep Results 後，結果會在下面的頁籤中保留&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;當滑鼠游標移到搜尋結果的項目上時，會出現參考到該部份的程式碼內容。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/11-overhauled-find-all-references-tooltip-for-context.png&quot; title=&quot;Find All References - 滑鼠移到項目上會出現使用到該功能的程式碼內容&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/11-overhauled-find-all-references-tooltip-for-context.png&quot; alt=&quot;Find All References - 滑鼠移到項目上會出現使用到該功能的程式碼內容&quot; title=&quot;Find All References - 滑鼠移到項目上會出現使用到該功能的程式碼內容&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;

      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;內建的程式碼對齊線功能：以往透過類似像 Indent Guides 之類的擴充功能才能擁有的對齊線功能，現在在 Visual Studio 2017 RC 中也內建囉!!目前這個功能支援 C# 、 VB 和 XAML 以及透過 TextMate 語法支援的檔案也可以使用喔!!&lt;/p&gt;

    &lt;p&gt;這個功能若被關閉的話，可以透過功能選單中的 &lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;Options&lt;/code&gt; -&amp;gt;&lt;code&gt; Text Editor&lt;/code&gt; &amp;gt; &lt;code&gt;General&lt;/code&gt; -&amp;gt; 勾選 &lt;code&gt;Show structure guide lines&lt;/code&gt; 核選方塊即可。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/12-built-in-structure-guide-lines.png&quot; title=&quot;內建的程式對齊線功能&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/12-built-in-structure-guide-lines.png&quot; alt=&quot;內建的程式對齊線功能&quot; title=&quot;內建的程式對齊線功能&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/13-show-structure-guide-lines-option.png&quot; title=&quot;Show structure guide lines 選項&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/13-show-structure-guide-lines-option.png&quot; alt=&quot;Show structure guide lines 選項&quot; title=&quot;Show structure guide lines 選項&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;editor-config&quot;&gt;支援 Editor Config&lt;/h2&gt;

&lt;p&gt;Visual Studio 2017 從 RC1 起就內建對 .editorconfig 檔的支援了。若您有在多種不同 IDE 撰寫程式的習慣，而且希望能在各不同工具裡保持一致的程式碼風格的話，不妨參考使用 Editor Config 來達到這個目的。而且好消息是， Resharper 也有計劃在未來支援 .editorconfig 檔喔!!&lt;/p&gt;

&lt;p&gt;不過，目前還有一些還沒解決的 bug 存在，使用上可能得要稍微注意喔!! 如果對於在 Visual Studio 中使用 Editor Config 有興趣的話，也可以參考
&lt;a href=&quot;https://github.com/editorconfig/editorconfig-visualstudio#readme&quot; title=&quot;Github - Editor Config for Visual Studio&quot;&gt;Github - Editor Config for Visual Studio&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;開啟資料夾功能&lt;/h2&gt;

&lt;p&gt;Visual Studio 2017 RC 提供了直接開啟資料夾的功能，而且更棒的是，針對 C++ 、 Node.js (JavaScript/TypeScript) 、 C# 與 VB 這幾種語言編寫的檔案都提供語言高亮的支援。甚至，若您有安裝該語言相關的功能的話，還可以直接進行編譯或是除錯喔!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/14-open-folder.png&quot; title=&quot;開啟資料夾功能&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/14-open-folder.png&quot; alt=&quot;開啟資料夾功能&quot; title=&quot;開啟資料夾功能&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外，直接開啟資料夾之後還提供下列幾種功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;透過前面介紹的 GoTo 功能在資料夾中進行巡覽。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/15-go-to-support-in-open-folder.png&quot; title=&quot;透過 GoTo 進行巡覽&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/15-go-to-support-in-open-folder.png&quot; alt=&quot;透過 GoTo 進行巡覽&quot; title=&quot;透過 GoTo 進行巡覽&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;透過 Solution Explorer 瀏覽子資料夾。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 Solution Explorer 中的資料夾名稱上按下滑鼠右鍵會出現&lt;code&gt;以檔案總管開啟資料夾&lt;/code&gt;或是&lt;code&gt;開啟開發者命令提示字元&lt;/code&gt;選項。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/16-open-developer-command-prompt-support-in-open-folder.png&quot; title=&quot;開啟資料夾或是開啟開發者命令提示字元&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/16-open-developer-command-prompt-support-in-open-folder.png&quot; alt=&quot;開啟資料夾或是開啟開發者命令提示字元&quot; title=&quot;開啟資料夾或是開啟開發者命令提示字元&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以輕鬆的透過方案與資料夾下拉清單在不同的方案或是資料夾之間切換。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/17-solution-switch-through-solution-selector-dropdown.png&quot; title=&quot;透過方案與資料夾下拉清單在不同的方案或是資料夾之間切換&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/17-solution-switch-through-solution-selector-dropdown.png&quot; alt=&quot;透過方案與資料夾下拉清單在不同的方案或是資料夾之間切換&quot; title=&quot;透過方案與資料夾下拉清單在不同的方案或是資料夾之間切換&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;透過 launch.vs.json 檔設定除錯與啟動的設定；這個動作可以透過在可進行除錯的檔案上按下滑鼠右鍵並選取 &lt;code&gt;&quot;Debug and Launch Settings&quot;&lt;/code&gt; 來完成。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/18-debug-and-launch-settings.png&quot; title=&quot;Debug and Launch Settings&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/18-debug-and-launch-settings.png&quot; alt=&quot;Debug and Launch Settings&quot; title=&quot;Debug and Launch Settings&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;透過 tasks.vs.json 檔設定任務與自訂編譯相關設定；這個動作可以透過在任意檔案上按下滑鼠右鍵並選取 &lt;code&gt;&quot;Configure Tasks&quot;&lt;/code&gt; 來完成。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/19-configure-tasks.png&quot; title=&quot;Configure Tasks&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/19-configure-tasks.png&quot; alt=&quot;Configure Tasks&quot; title=&quot;Configure Tasks&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;上述兩個檔案在 JSON 編輯器中都會享有 IntelliSense 的支援。
&lt;a href=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/20-intellisense-support.png&quot; title=&quot;上述兩個檔案在 JSON 編輯器中都會享有 IntelliSense 的支援&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-30-first-look-on-vs2017-rc-general-coding-enhancement/20-intellisense-support.png&quot; alt=&quot;上述兩個檔案在 JSON 編輯器中都會享有 IntelliSense 的支援&quot; title=&quot;上述兩個檔案在 JSON 編輯器中都會享有 IntelliSense 的支援&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上就是這次和各位分享關於 Visual Studio 2017 RC 中，關於一般程式碼撰寫體驗的部份，心動了嗎? 快點一起安裝體驗一下吧!!~&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/01/31/first-look-on-vs2017-rc-general-coding-enhancement/&quot;&gt;初探 Visual Studio 2017 RC - 程式撰寫體驗篇&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on January 31, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[初探 Visual Studio 2017 RC - IDE 使用者體驗篇]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/01/29/first-look-on-vs2017-rc-ide-ux-enhancement/"/>
  <id>http://ouch1978.github.io/2017/01/29/first-look-on-vs2017-rc-ide-ux-enhancement</id>
  <published>2017-01-29T06:30:00+08:00</published>
  <updated>2017-01-29 06:30:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Visual%20Studio" term="Visual Studio" />
  <content type="html">
  
    &lt;p&gt;在 &lt;a href=&quot;http://ouch1978.github.io/2017/01/20/first-look-on-vs2017-rc-installation/&quot; title=&quot;初探 VISUAL STUDIO 2017 RC - 安裝篇&quot;&gt;初探 VISUAL STUDIO 2017 RC - 安裝篇&lt;/a&gt; Visual Studio 2017 RC 的安裝體驗，這篇就要針對基本 IDE 的使用者體驗增強部份來作一些分享。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;程式啟動與開啟專案的速度提升&lt;/h2&gt;

&lt;p&gt;根據官方的說法，Visual Studio 2017 的啟動速度比 Visual Studio 2015 提升了 50% 以上，如同 &lt;a href=&quot;http://ouch1978.github.io/2017/01/20/first-look-on-vs2017-rc-installation/&quot; title=&quot;初探 VISUAL STUDIO 2017 RC - 安裝篇&quot;&gt;初探 VISUAL STUDIO 2017 RC - 安裝篇&lt;/a&gt; 文末所提的，我親自實測 Visual Studio 2015 和 Visual Studio 2017 RC 從點下圖示到出現開始畫面的時間分別為 19.45 秒和 9.23 秒。
分別用 Visual Studio 2015 和 Visual Studio 2017 RC 開啟同一個包含八個專案的方案，前者完全開啟得花將近 30 秒，後者只花了 10 秒左右，不需要透過其他的測量工具就可以感受到非常明顯的差異。&lt;/p&gt;

&lt;p&gt;另外，在 Visual Studio 2017 RC 裡面也加入了一個類似之前在 IE 裡面檢查 Plug-in 載入時間的功能，我們可以透過功能表的 Help -&amp;gt; Manage Visual Studio Performance 來隨時監控是不是有哪個 Plug-in 會拖慢啟動速度或是執行時期的效能，以方便我們進行微調。
&lt;a href=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/01-manage-visual-studio-performance.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/01-manage-visual-studio-performance.png&quot; alt=&quot;Visual Studio Performance&quot; title=&quot;Visual Studio Performance&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果偵測到任何會拖累執行效能的兇手，也會出現提示喔!!
&lt;a href=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/02-alert-for-time-consuming-extension.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/02-alert-for-time-consuming-extension.png&quot; alt=&quot;偵測到影響啟動速度的擴充功能時出現的提示&quot; title=&quot;偵測到影響啟動速度的擴充功能時出現的提示&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;開始畫面的優化&lt;/h2&gt;

&lt;p&gt;除了 &lt;a href=&quot;http://ouch1978.github.io/2017/01/20/first-look-on-vs2017-rc-installation/&quot; title=&quot;初探 VISUAL STUDIO 2017 RC - 安裝篇&quot;&gt;初探 VISUAL STUDIO 2017 RC - 安裝篇&lt;/a&gt; 文末提到的開始畫面有重新設計的介面之外，新版的開始畫面還多了以下幾項方便的功能：
- 可以透過 VSTM 或是強化的最近開啟的檔案工具(MRU) 更輕鬆的開啟本地的專案或是解決方案。
- 新版的開始畫面的最近開啟的檔案工具會顯示你最近從別的裝置上複製(Clone) 的檔案庫，讓你能更輕易的將它們也複製到本機上來。
- 可以透過可搜尋的專案樣版來建立新專案，並且最近使用過的專案樣版會透過您的個人帳號進行同步。
&lt;a href=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/03-the-searchable-project-templates.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/03-the-searchable-project-templates.png&quot; alt=&quot;可搜尋的專案樣版&quot; title=&quot;可搜尋的專案樣版&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以透過開始畫面上的 “Check out from VSTS” 選項快速啟動由 VSTS 上複製的專案。&lt;/li&gt;
  &lt;li&gt;可以將 Get Started 區域隱藏起來&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新聞(News) 區現在可以收合了
&lt;a href=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/04-the-dismissable-get-started.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/04-the-dismissable-get-started.png&quot; alt=&quot;可隱藏的 Get Started 與收合的新聞區&quot; title=&quot;可隱藏的 Get Started 與收合的新聞區&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;新聞中的項目若有更新時將有小圖示提示&lt;/li&gt;
      &lt;li&gt;當新聞區收合且有新聞項目更新時，收合控制項上將會顯示小圖示提示。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;可批次修改多個擴充功能的設定&lt;/h2&gt;

&lt;p&gt;我們可以在 Visual Studio 2017 的 Extensions and Updates 對話視窗的右下角，為那些需要重新啟動 Visual Studio 才能進行安裝、更新或是解除安裝的擴充功能設定排程；若要解除排程的話，只需要按下旁邊的 X 按鈕就可以囉!!
&lt;a href=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/05-now-it%27s-schedule-for-uninstall.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/05-now-it%27s-schedule-for-uninstall.png&quot; alt=&quot;可排程反安裝擴充功能&quot; title=&quot;可排程反安裝擴充功能&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/06-scheduling-for-uninstall.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/06-scheduling-for-uninstall.png&quot; alt=&quot;將反安裝列入排程&quot; title=&quot;將反安裝列入排程&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;當 VSIX 安裝包偵測到 Visual Studio 關閉之後，就會自動完成排程中設定的工作或修改喔!!&lt;/p&gt;

&lt;h2 id=&quot;roaming-extension-manager&quot;&gt;內建 Roaming Extension Manager&lt;/h2&gt;

&lt;p&gt;Visual Studio 2017 這次直接內建了方便的擴充功能同步元件 - Roaming Extension Manager 啦!!~ 之後只要使用同一個開發者帳號，就可以在多部不同的機器上面使用相同的擴充元件進行開發囉!! (關於 Roaming Extension Manager 的介紹，可以參考 &lt;a href=&quot;http://ouch1978.github.io/2016/11/01/roaming-extension-manager/&quot; title=&quot;透過 ROAMING EXTENSION MANAGER 在不同機器上同步 VISUAL STUDIO 2015 的擴充功能&quot;&gt;透過 ROAMING EXTENSION MANAGER 在不同機器上同步 VISUAL STUDIO 2015 的擴充功能&lt;/a&gt; 一文)
&lt;a href=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/07-roaming-extension-manager.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/07-roaming-extension-manager.png&quot; alt=&quot;Roaming Extension Manager&quot; title=&quot;Roaming Extension Manager&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;lightweight-solution-load&quot;&gt;輕量化解決方案載入(Lightweight Solution Load)&lt;/h2&gt;

&lt;p&gt;為了解決龐大解決方案載入費時的問題，微軟這次研發出了”輕量化解決方案載入”功能。在載入龐大解決方案的時候，可以透過這個功能大幅的縮短載入時間以及記憶體的使用量。不過這個功能預設是關閉的，可以透過功能選單裡面的來開啟這個功能。
&lt;a href=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/08-lightweight-solution-load.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/08-lightweight-solution-load.png&quot; alt=&quot;Lightweight Solution Load&quot; title=&quot;Lightweight Solution Load&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;輕量化解決方案載入功能特別適合於使用 C# 或是混合 C# 與 C++ 開發的專案。當偵測到您正嘗試開啟符合條件的解決方案時，Visual Studio 也會很貼心的提示您開啟這個功能，以增進整體的使用者體驗喔!!&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;狀態列對版本控管的優化&lt;/h2&gt;

&lt;p&gt;Visual Studio 2017 的狀態列也特別針對版本控管的部份加入了幾項訊息的提示，以及整合，是我個人覺得非常貼心的設計。而且不單純是只有文字的提示而已，點擊每個項目的話都會出現相關的功能可以作更進一步的動作。
例如點擊向上箭頭就可以開啟Push功能面板，是不是非常方便啊!?
&lt;a href=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/09-status-bar-integrated-with-source-control.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/09-status-bar-integrated-with-source-control.png&quot; alt=&quot;工具列針對版本控管的強化&quot; title=&quot;工具列針對版本控管的強化&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;後記&lt;/h2&gt;

&lt;p&gt;就在寫這篇文章的過程中(要利用零碎的時間來孵文章的關係，這篇文章的生產週期跨了快一個星期，淚…)，微軟很開心的在 2017 年 1 月 26 日(換算成台灣時間的話應該是 1 月 27 日)推送了 Build 26127.00 版的更新(是要給我們當除夕禮物的嗎?)，我也藉此體驗到了新版 Visual Studio 更新的使用者經驗。
和以往相同的，在功能選單的 Tools -&amp;gt; Extensions and Updates 下會看到 Visual Studio 有更新，點選了更新之後，會提示我們得要更新安裝工具，更新了安裝工具之後就會看到如下的更新畫面啦~
&lt;a href=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/10-visual-studio-2017-rc-update.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-28-first-look-on-vs2017-rc-ide-ux-enhancement/10-visual-studio-2017-rc-update.png&quot; alt=&quot;Visual Studio 2017 RC 更新畫面&quot; title=&quot;Visual Studio 2017 RC 更新畫面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;除了本文介紹的相關改進之外，其實 Visual Studio 2017 還有很多其它的加強，有興趣的朋友們不妨直接參閱 &lt;a href=&quot;https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes&quot; title=&quot;Release Notes of Visual Studio 2017&quot;&gt;Visual Studio 2017 的官方產品介紹頁面&lt;/a&gt;。&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/01/29/first-look-on-vs2017-rc-ide-ux-enhancement/&quot;&gt;初探 Visual Studio 2017 RC - IDE 使用者體驗篇&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on January 29, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[初探 Visual Studio 2017 RC - 安裝篇]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2017/01/20/first-look-on-vs2017-rc-installation/"/>
  <id>http://ouch1978.github.io/2017/01/20/first-look-on-vs2017-rc-installation</id>
  <published>2017-01-20T05:30:00+08:00</published>
  <updated>2017-01-20 05:30:00 +0800T00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#Visual%20Studio" term="Visual Studio" />
  <content type="html">
  
    &lt;p&gt;在 2016 年的 11月，微軟藉由 Connect 大會發佈了”地表最強開發工具” Visual Studio 2017 的 RC (發行候選)版本。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Visual Studio 2017 支援的平台和相容性可以參考 &lt;a href=&quot;https://www.visualstudio.com/zh-tw/productinfo/vs2017-compatibility-vs&quot; title=&quot;Visual Studio 2017 平台目標及相容性&quot;&gt;這個連結&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;code&gt;這個版本的 Visual Studio 不支援 Silverlight 專案。 若要維護 Silverlight 應用程式，請繼續使用 Visual Studio 2015。&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;&lt;code&gt;這個版本不支援 Windows 市集 8.1 和 8.0 以及 Windows Phone 8.1 和 8.0 專案。 若要維護這些應用程式，請繼續使用 Visual Studio 2015。 若要維護 Windows Phone 7.x 專案，請使用 Visual Studio 2012。&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;已哭…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果沒什麼意外的話，應該在接下來的一兩個月裡面，我們就可以看到正式版出現了。&lt;/p&gt;

&lt;p&gt;在正式版出現之前，先用相對穩定的 RC 版來熟悉一下之後將要使用的工具是蠻值得一試的一件事。&lt;/p&gt;

&lt;p&gt;接下來就各位分享一下安裝和試用的心得。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;下載&lt;/h2&gt;

&lt;p&gt;首先，這次釋出的 RC 版和之前的版本有些不同，在官網上並沒有官方的 ISO 檔可供下載，也沒有官方的離線安裝檔，只有線上安裝檔可供下載。&lt;/p&gt;

&lt;p&gt;下載連結如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aka.ms/vs/15/release/vs_Community.exe&quot; title=&quot;下載 Visual Studio Community 2017 RC&quot;&gt;Visual Studio Community 2017 RC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aka.ms/vs/15/release/vs_Professional.exe&quot; title=&quot;下載 Visual Studio Professional 2017 RC&quot;&gt;Visual Studio Professional 2017 RC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aka.ms/vs/15/release/vs_Enterprise.exe&quot; title=&quot;下載 Visual Studio Enterprise 2017 RC&quot;&gt;Visual Studio Enterprise 2017 RC&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;雖然說官方並不提供離線安裝檔，但還是很佛心的寫了一篇文章教我們怎麼&lt;a href=&quot;https://docs.microsoft.com/zh-tw/visualstudio/install/create-an-offline-installation-of-visual-studio&quot; title=&quot;Create an offline installation of Visual Studio 2017 RC&quot;&gt;製作離線安裝檔&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;安裝&lt;/h2&gt;

&lt;p&gt;接下來，就安裝 Enterprise 版來體驗一下吧!!&lt;/p&gt;

&lt;p&gt;打開安裝檔之後，出現的是和以往截然不同設計的版權聲明畫面。
&lt;a href=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/01-license-terms.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/01-license-terms.png&quot; alt=&quot;版權聲明畫面&quot; title=&quot;版權聲明畫面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;按下同意按鈕的話，就會出現如下的畫面。(注意：&lt;code&gt;安裝之前請先關閉其它版本的 Visual Studio&lt;/code&gt; ，否則可能會因為衝突而無法繼續安裝。)
&lt;a href=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/02-workloads.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/02-workloads.png&quot; alt=&quot;安裝模組選項&quot; title=&quot;安裝模組選項&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;和之前的版本有很大差異的地方是，這次的版本所有的功能都是以模組化的方式在 Workloads 頁籤中選擇是否要進行安裝。
如果所有項目都不勾選，只安裝核心的編輯功能的話，大約會佔用 740 MB 的磁碟空間。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;眼尖的朋友們可能會發現畫面上有一個 Installation nickname 的文字輸入欄位，那是因為 Visual Studio 2017 支援不同版本共存，所以可以透過它來自訂開始功能表上顯示的名稱，例如 VS2017 Ent RC。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在 Individual components 頁籤中可以針對細項進行微調。
&lt;a href=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/03-individual-components.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/03-individual-components.png&quot; alt=&quot;各別元件微調&quot; title=&quot;各別元件微調&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;也可以在 Language packs 頁籤中選取想安裝的語言包。
&lt;a href=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/04-language-packs.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/04-language-packs.png&quot; alt=&quot;語言包選單&quot; title=&quot;語言包選單&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;若選取 Universal Windows Platform development、.NET desktop development 、Web development 和 Mobile development with .NET (Preview) 這幾個項目的話，則會佔用 19.76 GB 的磁碟空間。&lt;/p&gt;

&lt;p&gt;另外發現一個好玩的點，如果按下 Esc 鈕的話，還可以選擇不同的版本來安裝(所以不同版本的安裝檔只是預先幫我們選好該版本的意思?)。
&lt;a href=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/05-versions-selection.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/05-versions-selection.png&quot; alt=&quot;版本選擇&quot; title=&quot;版本選擇&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;為了省硬碟，我就以上述的項目直接進行安裝啦。安裝畫面如下(看到下面還有兩個 Install 鈕可以按，讓我很好奇，難道可以同時安裝不同的版本嗎!?答案是不行…)：
&lt;a href=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/06-installation.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/06-installation.png&quot; alt=&quot;安裝畫面&quot; title=&quot;安裝畫面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;若想以其它語系進行安裝的話，可以透過命令提示視窗執行安裝檔，在後方加入 –locale 參數並且指定語系。
如 vs_Enterprise.exe –locale zh-TW ，就可以用中文模式進行安裝。&lt;/p&gt;

  &lt;p&gt;目前支援的語系有 zh-CN, zh-TW, cs-CZ, en-US, fr-FR, de-DE, it-IT, ja-JP, ko-KR, pl-PL, pt-BR, ru-RU, es-ES, and tr-TR&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;安裝完成之後，會需要重新開機。
&lt;a href=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/07-reboot-required.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/07-reboot-required.png&quot; alt=&quot;安裝完成之後需要重新開機&quot; title=&quot;安裝完成之後需要重新開機&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;心得&lt;/h2&gt;

&lt;p&gt;依照我選擇的功能，整個安裝的過程大約花了一個小時出頭，還包含各功能模組的下載時間，整個安裝的體驗比之前的版本要來得流暢許多。&lt;/p&gt;

&lt;p&gt;首先，吸引到我眼球的是 Visual Studio 2017 的 Logo。新版 Logo 的莫比烏斯環看起來很明顯的比 Visual Studio 2015 的來得瘦了不少，不知道是不是有想要隱喻安裝所需要的硬碟空間變小的意味?變瘦的莫比烏斯環看起來也有比較敏捷的感覺。
&lt;br /&gt;&lt;a href=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/08-the-logo-is-changed-for-vs2017.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/08-the-logo-is-changed-for-vs2017.png&quot; alt=&quot;Visual Studio 2017 的 Logo 與 Visual Studio 2015 的差異&quot; title=&quot;Visual Studio 2017 的 Logo 與 Visual Studio 2015 的差異&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;再來，Visual Studio 2017 RC 開啟的速度也很明顯的比 Visual Studio 2015 快了許多(不知道是不是因為還沒裝什麼擴充功能的關係?)，大概差了有十秒以上。&lt;/p&gt;

&lt;p&gt;而且整個開始畫面也和 Visual Studio 2015 有蠻明顯的差異，資訊和每個項目之間的間距拉大了，看起來比較沒有壓迫感。
&lt;a href=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/09-start-page-of-visual-studio-2017-rc.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/09-start-page-of-visual-studio-2017-rc.png&quot; alt=&quot;Visual Studio 2017 RC 的開始畫面&quot; title=&quot;[Visual Studio 2017 RC 的開始畫面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;建立新專案時對話視窗的專案分類也和 Visual Studio 2015 有蠻大的差異，因為支援的專案類型變少了的關係，所以分類看起來也更加的簡潔了不少。
不過我一直很期待看到的 UWP 懶人專案樣版還是沒有出現…
&lt;a href=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/10-new-project-dialog.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/10-new-project-dialog.png&quot; alt=&quot;建立新專案的對話視窗&quot; title=&quot;[建立新專案的對話視窗&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;關於 Blend for Visual Studio 2017 RC 呢… 連開始畫面裡面的內容和連結都還是連到 2015 版的網頁(不過畫面上的確是寫著 2017 啦)…
嗯~就之後再觀查看看囉!!
&lt;a href=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/11-start-page-of-blend-for-vs2017-rc.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2017-01-19-first-look-on-vs2017-rc-installation/11-start-page-of-blend-for-vs2017-rc.png&quot; alt=&quot;Blend for Visual Studio 2017 RC 的開始畫面&quot; title=&quot;[Blend for Visual Studio 2017 RC 的開始畫面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以上是我簡短的安裝心得，有興趣的朋友也不妨安裝玩玩吧。&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2017/01/20/first-look-on-vs2017-rc-installation/&quot;&gt;初探 Visual Studio 2017 RC - 安裝篇&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on January 20, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[更改 UWP PowerPoint 設計範本中內建的 AppBar 圖示顏色]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2016/12/29/change-built-in-icon-color-in-uwp-ppt-template/"/>
  <id>http://ouch1978.github.io/2016/12/29/change-built-in-icon-color-in-uwp-ppt-template</id>
  <published>2016-12-29T05:30:00+08:00</published>
  <updated>2016-14-28T21:30:00.000ZT00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#UWP" term="UWP" /><category scheme="http://ouch1978.github.io/tags/#%E8%A8%AD%E8%A8%88" term="設計" /><category scheme="http://ouch1978.github.io/tags/#PowerPoint" term="PowerPoint" />
  <content type="html">
  
    &lt;p&gt;之前介紹的 UWP 的 PowerPoint 設計範本裡面內建了不少設計 App 時所需要的圖示。然而，它們有部份是圖形元件，可以直接修改顏色；但是有些是圖片，沒有辦法直接透過填色功能來改變它的顏色。&lt;/p&gt;

&lt;p&gt;內建的圖示都是黑色的，但是很不幸的，預設的 AppBar 是黑底，所以得搭配白色的圖示。&lt;/p&gt;

&lt;p&gt;這個時候，怎麼把圖片從黑轉白，或是從白轉黑，甚至改成其它的色彩，考驗的就是使用 PowerPoint 的功力啦。&lt;/p&gt;

&lt;p&gt;說穿了，只要把圖片重新上色，再調整它的亮度和對比就可以達到我們的目的，而且這些功能 PowerPoint 都有內建，不用透過其他的繪圖軟體就能辦到囉。&lt;/p&gt;

&lt;p&gt;這邊就透過下面的例子來作示範，看看怎麼把一個黑色的圖示改成白的：&lt;/p&gt;

&lt;p&gt;先從 Storyboad 內建的 Windows App Icon 圖示中拉出訊息和刪除這兩個圖示。
&lt;a href=&quot;/images/blog-images/2016-12-28-change-built-in-icon-color-in-uwp-ppt-template/01-two-icons-with-different-types.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-28-change-built-in-icon-color-in-uwp-ppt-template/01-two-icons-with-different-types.png&quot; alt=&quot;左邊的圖示是圖形元件，右邊則是圖片&quot; title=&quot;左邊的圖示是圖形元件，右邊則是圖片&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;左邊的訊息圖示是圖形元件，可以直接透過圖案填滿的功能來修改它的顏色。
&lt;a href=&quot;/images/blog-images/2016-12-28-change-built-in-icon-color-in-uwp-ppt-template/02-the-left-one-could-edit-the-color-directly.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-28-change-built-in-icon-color-in-uwp-ppt-template/02-the-left-one-could-edit-the-color-directly.png&quot; alt=&quot;左邊的圖示是圖形元件，可以直接修改顏色&quot; title=&quot;左邊的圖示是圖形元件，可以直接修改顏色&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;右邊的是圖片，直接使用圖案填滿的功能的話只會改到背景色。
&lt;a href=&quot;/images/blog-images/2016-12-28-change-built-in-icon-color-in-uwp-ppt-template/03-the-right-one-could-not-edit-the-color-directly.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-28-change-built-in-icon-color-in-uwp-ppt-template/03-the-right-one-could-not-edit-the-color-directly.png&quot; alt=&quot;右邊的圖示是圖片，無法直接修改顏色&quot; title=&quot;右邊的圖示是圖片，無法直接修改顏色&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;這時候，我們就可以開啟工具列的 &lt;code&gt;格式&lt;/code&gt; -&amp;gt; &lt;code&gt;色彩&lt;/code&gt; 選單來進行初步的顏色調整，點選下面的&lt;code&gt;圖片色彩選項&lt;/code&gt;。(也可以透過重新著色的功能改變成其它顏色喔!!)
&lt;a href=&quot;/images/blog-images/2016-12-28-change-built-in-icon-color-in-uwp-ppt-template/04-the-recolor-options.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-28-change-built-in-icon-color-in-uwp-ppt-template/04-the-recolor-options.png&quot; alt=&quot;顏色選單&quot; title=&quot;顏色選單&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接著在設定圖片格式面板中調整圖片的&lt;code&gt;亮度&lt;/code&gt;，把亮度調整為&lt;code&gt;100&lt;/code&gt;就是白色啦!!
&lt;a href=&quot;/images/blog-images/2016-12-28-change-built-in-icon-color-in-uwp-ppt-template/05-the-picture-color-options-panel.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-28-change-built-in-icon-color-in-uwp-ppt-template/05-the-picture-color-options-panel.png&quot; alt=&quot;調整圖片的亮度&quot; title=&quot;調整圖片的亮度&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;噹噹，大功告成!!
&lt;a href=&quot;/images/blog-images/2016-12-28-change-built-in-icon-color-in-uwp-ppt-template/06-here-we-are.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-28-change-built-in-icon-color-in-uwp-ppt-template/06-here-we-are.png&quot; alt=&quot;大功告成&quot; title=&quot;大功告成&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;是不是很簡單啊!?&lt;/p&gt;

&lt;p&gt;這個小技巧不只能使用在設計 App 的階段，平常製作投影片的時候也是很實用的喔!!~&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2016/12/29/change-built-in-icon-color-in-uwp-ppt-template/&quot;&gt;更改 UWP PowerPoint 設計範本中內建的 AppBar 圖示顏色&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on December 29, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[使用 Dev Center 提供的 PowerPoint 設計範本製作 UWP 的 UI 雛型]]></title>
  <link rel="alternate" type="text/html" href="http://ouch1978.github.io/2016/12/14/using-powerpoint-template-for-designing-uwp-app/"/>
  <id>http://ouch1978.github.io/2016/12/14/using-powerpoint-template-for-designing-uwp-app</id>
  <published>2016-12-14T21:30:00+08:00</published>
  <updated>2016-14-14T13:30:00.000ZT00:00:00-00:00</updated>
  
  <author>
    <name>Ouch Liu (劉耀群)</name>
    <uri>http://ouch1978.github.io</uri>
    <email>ouch1978@hotmail.com</email>
  </author>
  <category scheme="http://ouch1978.github.io/tags/#UWP" term="UWP" /><category scheme="http://ouch1978.github.io/tags/#%E8%A8%AD%E8%A8%88" term="設計" />
  <content type="html">
  
    &lt;p&gt;設計和點子這種東西往往都是靈光一閃，在那一閃的瞬間往往只能透過紙筆來勾勒出心中的想法，但是對於像我這種懶人來說，如果能有一個方便製作/記錄雛型的工具，應該會是很有幫助的一件事。&lt;/p&gt;

&lt;p&gt;最好是裡面包含了所有 UWP 裡能使用的控制項，讓我只要透過簡單的拖拉就可以把我的想法清楚的描述出來。&lt;/p&gt;

&lt;p&gt;而在 Dev Center 裡就有這麼一個神奇的東西，可以讓我們透過再也熟悉不過的工具 - PowerPoint 來刻出 UI 的雛型。&lt;/p&gt;

&lt;p&gt;其實這個樣版已經存在蠻久的了，只是可能大部份的人可能不是找不到它，就是會忽略它，或是不知道該怎麼使用它。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;下載&lt;/h2&gt;

&lt;p&gt;在 Windows 開發人員中心裡的 &lt;a href=&quot;https://msdn.microsoft.com/windows/uwp/design-downloads/index&quot; title=&quot;UWP app 的設計下載&quot;&gt;UWP app 的設計下載&lt;/a&gt; 一區裡面其實有不少設計相關的資源。&lt;/p&gt;

&lt;p&gt;例如給 PhotoShop 和 Illustrator 使用的設計範本、磚與圖示產生器，以及 UWP App 的範例等等。&lt;/p&gt;

&lt;p&gt;而今天的主角呢，就是我個人覺得很方便的 &lt;a href=&quot;https://go.microsoft.com/fwlink/p/?LinkId=534632&quot; title=&quot;點此直接下載&quot;&gt;PowerPoint 設計範本&lt;/a&gt; 啦。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;使用說明&lt;/h2&gt;

&lt;p&gt;該檔案下載下來是一個壓縮檔，解壓縮之後會看到裡面有&lt;code&gt;兩個說明檔&lt;/code&gt;，&lt;code&gt;三個給不同平台使用的 PowerPoint pptx 檔&lt;/code&gt;，以及一個名為 &lt;code&gt;Storyboard shapes&lt;/code&gt; 的資料夾。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/files-in-zip.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/files-in-zip.png&quot; alt=&quot;壓縮檔中包含的檔案&quot; title=&quot;壓縮檔中包含的檔案&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;打開任何一個 PowerPoint 檔 (接下來，以設計 PC 版的 App 為例，打開 UWP app templates for PCs.pptx ) 之後，應該會看到裡面包含了四張投影片。&lt;/p&gt;

&lt;p&gt;蝦毀，內容都是英文!!? 沒關係，先喝杯茶壓壓驚，基本上裡面也是在講解該怎麼使用這份投影片。&lt;/p&gt;

&lt;p&gt;簡單翻譯如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;將投影片&lt;code&gt;另存新檔&lt;/code&gt;，注意別蓋到原來的檔案。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;確認你已經安裝了 &lt;code&gt;Visual Studio 2013 Premium 或以上&lt;/code&gt;的版本。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;切換到 &lt;code&gt;Storyboarding&lt;/code&gt; 頁籤，並且打開 &lt;code&gt;Storyboard Shapes&lt;/code&gt; 面板。
&lt;a href=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/oepn-the-storyboard-shapes-panel.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/oepn-the-storyboard-shapes-panel.png&quot; alt=&quot;開啟 Storyboard Shapes 面版&quot; title=&quot;開啟 Storyboard Shapes 面版&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;按下 &lt;code&gt;Import Shapes&lt;/code&gt; 並且選取 Storyboard shapes 中的 &lt;code&gt;Windows Controls Shapes.sbsx&lt;/code&gt; 檔進行控制項圖庫的匯入。
&lt;a href=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/the-import-shapes-button.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/the-import-shapes-button.png&quot; alt=&quot;按下 Import Shapes 按鈕進行匯入&quot; title=&quot;按下 Import Shapes 按鈕進行匯入&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Storyboard Shapes 面板中應該會多出一個名為 &lt;code&gt;TOOLKIT Windows Control Shapes_vX.x.x.x&lt;/code&gt; 的分類。
&lt;a href=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/control-shapes-category-added.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/control-shapes-category-added.png&quot; alt=&quot;匯入成功後出現的分類&quot; title=&quot;匯入成功後出現的分類&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用名為 &lt;code&gt;Device Frames&lt;/code&gt; 的頁面來設計你的 UI。
&lt;a href=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/the-device-frames-page.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/the-device-frames-page.png&quot; alt=&quot;Device Frames 頁&quot; title=&quot;Device Frames 頁&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在&lt;code&gt;檢視&lt;/code&gt;頁籤中開啟&lt;code&gt;輔助線&lt;/code&gt;功能，並確保你設計的 UI 不要超出輔助線的邊界。
&lt;a href=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/turn-on-the-guides.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/turn-on-the-guides.png&quot; alt=&quot;開啟輔助線&quot; title=&quot;開啟輔助線&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;從 Storyboard Shapes 面板中透過拖拉的方式把控制項放到 Device Frames 頁面中。
&lt;a href=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/drag-control-into-the-device-frames-page.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/drag-control-into-the-device-frames-page.png&quot; alt=&quot;以拖拉的方式新增控制項到頁面中&quot; title=&quot;以拖拉的方式新增控制項到頁面中&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;透過&lt;code&gt;常用&lt;/code&gt; -&amp;gt; &lt;code&gt;選取&lt;/code&gt; -&amp;gt; &lt;code&gt;選取窗格&lt;/code&gt; 面板確認你的 Device Frame 圖層為置頂圖層。
&lt;a href=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/make-sure-the-device-frame-on-top-level.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/make-sure-the-device-frame-on-top-level.png&quot; alt=&quot;透過選取窗格確認 Device Frame 為置頂圖層&quot; title=&quot;透過選取窗格確認 Device Frame 為置頂圖層&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;當你完成設計之後，可以透過另存新檔的功能，將設計好的畫面另存為 PNG 檔 (匯出投影片時選擇&lt;code&gt;僅此投影片&lt;/code&gt;)。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;另外，你也可以透過投影片裡面的 Type styles 和 Color swatches ，來作為字體大小和配色的參考喔!!&lt;/p&gt;

&lt;p&gt;大功告成啦!!~
&lt;a href=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/a-simple-sample-of-ui-design.png&quot;&gt;&lt;img src=&quot;/images/blog-images/2016-12-14-using-powerpoint-template-for-designing-uwp-app/a-simple-sample-of-ui-design.png&quot; alt=&quot;大功告成&quot; title=&quot;大功告成&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;是不是很方便呢!?&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://ouch1978.github.io/2016/12/14/using-powerpoint-template-for-designing-uwp-app/&quot;&gt;使用 Dev Center 提供的 PowerPoint 設計範本製作 UWP 的 UI 雛型&lt;/a&gt; was originally published by Ouch Liu (劉耀群) at &lt;a href=&quot;http://ouch1978.github.io&quot;&gt;Ouch1978 @ Github&lt;/a&gt; on December 14, 2016.&lt;/p&gt;</content>
</entry>

</feed>
